;*	*	*	*	*	*	*	*	*	*	*	*	*
;*			 		   PROJETO PCL1001					*
;*				 DESENVOLVIDO POR VITOR AMADEU SOUZA				*
;*					TECNOLOGIA BRASILEIRA
;*	*	*	*	*	*	*	*	*	*	*	*	*

;*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		CONTROLE DE VERSOES					*												
;*												*
;* 23/12/2004 MC1_1.ASM  ==> ESTRUTURACAO BASICA PARA INICIO					*
;*			     DO PROJETO								*
;* 24/12/2004 MC1_2.ASM  ==> SOFTWARE DE COMUNICACAO I2C 					*	
;			     LEITURA/ESCRITA 							*
;* 24/12/2004 MC1_3.ASM  ==> MELHORA NA ROTINA DE 						*
;*			     ESCRITA/LEITURA I2C						*
;* 25/12/2004 MC1_4.ASM  ==> CONTROLE DO DISPLAY LCD	E COMU_ 				*
;*			     CAÇÃO VIA 232  ESCRITA/LEITURA  					*
;*			     NA MEMÓRIA RS24C16				-			*
;* 25/12/2004 MC1_5.ASM  ==> INÍCIO DA INTRODUÇÃO DA MÁQUINA DE DECODIFICAÇÃO			*
;*			     ACIONAMENTO DOS RELÊS						*
;* 27/12/2004 MC1_6.ASM  ==> COLOCADO NOVAS FUNÇÕES DE DECODIFICAÇÃO				*
;* 27/12/2004 MC1_7.ASM  ==> COLOCADO NOVAS FUNÇÕES DE DECODIFICAÇÃO				*
;* 27/12/2004 MC1_8.ASM  ==> COLOCADO NOVAS FUNÇÕES DE DECODIFICAÇÃO				*
;* 27/12/2004 MC1_9.ASM  ==> COLOCADO NOVAS FUNÇÕES DE DECODIFICAÇÃO				*												*
;* 28/12/2004 MC1_10.ASM ==> COLOCADO NOVAS FUNÇÕES DE DECODIFICAÇÃO				*
;* 29/12/2004 MC1_11.ASM ==> COLOCADO NOVAS FUNÇÕES DE DECODIFICAÇÃO				*
;* 29/12/2004 MC1_12.ASM ==> COLOCADO NOVAS FUNÇÕES DE DECODIFICAÇÃO				*
;* 30/12/2004 MC1_13.ASM ==> COLOCADO NOVAS FUNÇÕES DE DECODIFICAÇÃO				*
;* 30/12/2004 MC1_14.ASM ==> COLOCADO NOVAS FUNÇÕES DE DECODIFICAÇÃO				*
;* 30/12/2004 MC1_15.ASM ==> COLOCADO NOVAS FUNÇÕES DE DECODIFICAÇÃO				*
;* 30/12/2004 MC1_16.ASM ==> ALTERAÇÃO NOS IOS							*
;* 30/12/2004 MC1_17.ASM ==> ALTERAÇÃO NOS IOS							*
;* 01/01/2005 MC1_18.ASM ==> RETIRADO O CLOCK EXTERNO PARA GANHAR DOIS PINOS DE IO. COLOCADO AD *
;* 30/12/2004 MC1_19.ASM ==> ALTERAÇÃO NOS IOS							*
;* 30/12/2004 MC1_20.ASM ==> ALTERAÇÃO NOS IOS							*
;* 30/12/2004 MC1_21.ASM ==> ALTERAÇÃO NOS IOS							*
;*            MC1_22.ASM ==> ...								*
;*            MC1_23.ASM ==> ...								*
;*            MC1_24.ASM ==> ...								*	
;*            MC1_25.ASM ==> ...								*
;* 13/01/2005 MC1_27.ASM ==> VERSÃO 648A							*		
;* 15/01/2005 MC1_28.ASM ==> NÃO OBTIVE SUCESSO AO COLOCAR A FUNÇÃO FREQUENCY_OUT		*
;* 15/01/2005 MC1_29.ASM ==> ROTINAS MATEMÁTICAS						*
;* 15/01/2005 MC1_30.ASM ==> MELHORAMENTO DAS ROTINAS MATEMÁTICAS PARA TRABALHAR		*	
;*			     COM MAIS BITS							*				
;* 15/01/2005 MC1_31.ASM ==> VERSÃO QUE SUPORTA 8 VARIÁVEIS E FUNÇÃO BINARY			*
;* 16/01/2005 MC1_32.ASM ==> INCORPORADO A FUNÇÃO HEX E OUTROS					*
;* 16/01/2005 MC1_33.ASM ==> INCLUÍDA A FUNÇÃO DE TRANSMISSÃO DE DADOS EM BINÁRIO, HEX, DEC E OCT.*
;* 16/01/2005 MC1_34.ASM ==> REPEAT POR VARIÁVEL						*
;* 16/01/2005 MC1_35.ASM ==> NOVOS COMANDOS0							*
;* 18/01/2005 MC1_36.ASM ==> COLOCADO O CALL							*
;* 19/01/2005 MC1_37.ASM ==> NOVOS COMANDOS							*	
;* 21/01/2005 MC1_38.ASM ==> NOVOS COMANDOS, IMPLEMENTADO A FUNÇÃO VELOCIDADE MÉDIA		*
;* 22/01/2005 MC1_39.ASM ==> NOVOS COMANDOS							*
;* 22/01/2005 MC1_40.ASM ==> NOVOS COMANDOS							*
;* 23/01/2005 MC1_41.ASM ==> INCREMENTADO A FUNÇÃO JOGO						*	
;* 27/01/2005 MC1_42.ASM ==> INCREMENTADO A VARIÁVEL GENERAL					*
;* 29/01/2005 MC1_43.ASM ==> IMPLEMENTADA A FUNÇÃO RPM						*
;* 29/01/2005 MC1_44.ASM ==> IMPLEMENTADA A FUNÇÃO DE CÁLCULO DA VELOCIDADE ANGULAR		*
;* 20/01/2005 MC1_45.ASM ==> RETIRADO O PROBLEMA PARA SE GRAVAR UM NOVO PROGRAMA NA MEMÓRIA	*		
;* 03/04/2005 MC1_46.ASM ==> ALTERADO A INICIALIZAÇÃO DO CMCON					*	
;* 16/04/2005 MC1_46.ASM ==> IMPLEMENTADO O COMANDO PERIODÍMETRO COM A PLACA DE C.IMPRESSO	*	
;* 16/04/2005 MC1_47.ASM ==> ???								*
;* 29/08/2005 MC1_48.ASM ==> AJUSTE DO SISTEMA							*	
;* 03/10/2005 MC1_49.ASM ==> COMPATIBILIZAÇÃO DO SOFTWARE					*
;* 17/01/2006 MC1_58.ASM ==> VERSAO SANTO INÁCIO						*	
;* 24/01/2006 MC1_59.ASM ==> VERSÃO REVISADA PARA O CSI						*
;* 12/03/2006 MC1_63.ASM ==> ALTERAÇÃO PARA LEITURA DO CANAL DE AD				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	

#INCLUDE <P16F648A.INC>
 __CONFIG _CP_ON & _XT_OSC & _PWRTE_ON & _MCLRE_OFF & _LVP_OFF & _WDT_ON & _BODEN_OFF & _DATA_CP_ON
 ERRORLEVEL 2

;*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		 DEFINES AUXILIARES					*
;*	*	*	*	*	*	*	*	*	*	*	*	*

#DEFINE	BANK0	BCF	STATUS,RP0
#DEFINE	BANK1	BSF	STATUS,RP0
#DEFINE PAGE0	BCF	PCLATH,3
#DEFINE PAGE1 	BSF	PCLATH,3


;*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  DEFINICAO DE RAM					*
;*	*	*	*	*	*	*	*	*	*	*	*	*

	CBLOCK 0x20
		CARACTER	
		TEMPO1		
		TEMPO2
		TEMPO3
		TEMPO4
		;REG_595
		CONTADOR
		;DADO	
		ENDERECO_LO
		ENDERECO_HI
		BUFFER
		BUFFER_I2C
		BUFFER_SERIAL
		FLAGS0
		FLAGS1
		FLAGS2
		FLAGS3
		FLAGS4
		FLAGS5
		FLAGS6
		FLAGS7
		
		PONTEIRO_DISP
		AUX1
		AUX2
		CONTADOR_USART
		TEMP
		TEMP_1
		ENDERECO_LO_REPEAT
		ENDERECO_HI_REPEAT
		ENDERECO_LO_WHILE
		ENDERECO_HI_WHILE
		ENDERECO_LO_DOWHILE
		ENDERECO_HI_DOWHILE
		ENDERECO_LO_PROG
		ENDERECO_HI_PROG
		VEZES_REPEAT_HI
		VEZES_REPEAT_LO
		
		HORA
		MINUTO
		SEGUNDO
		
		DIA
		MES
		ANO

		VEZES_RTC
		
		COUNTER1_LO
		ESP_COUNTER1_LO
		COUNTER1_HI
		ESP_COUNTER1_HI
		
		BUFFER_RX
		CONVERSAO_0
		CONVERSAO_1
		CONVERSAO_2
		CONVERSAO_3
		CONVERSAO_4
		
		STOPWATCH_HORA			
		STOPWATCH_MINUTO
		STOPWATCH_SEGUNDO
				
		LSB
		MSB
				
		VALOR_AD
		
		MULTIPLICADOR_DIVIDENDO
		MULTIPLICANDO_DIVISOR
		MULTIPLICANDO_2
		
		RESULTADO_HI
		RESULTADO_LO
				
		BASE_VOLTAGE
		FLAG_LPA
		
		AUX_MATEMATICA_HI
		AUX_MATEMATICA_LO
	
		FSR_VARIAVEL
		
		RANDOM
		
		ENDERECO_LO_CALL
		ENDERECO_HI_CALL
		
		TEMPO_VELOCIMETRO
		ESPACO_VELOCIMETRO
		VELOCIDADE
		
		AUX_HIPOTENUSA_HI
		AUX_HIPOTENUSA_LO
		
		REG_SHUTDOWN
		
		TEMPO_TERMINAL
		
		REG_GAME_A
		REG_GAME_B
		REG_GAME_C
		REG_GAME_D
		
		AUX_GAME_A
		AUX_GAME_B
		AUX_GAME_C
		AUX_GAME_D
	
		CARACTER_ASCII
		
		GENERAL_LO			; VARIÁVEL GERAL PARTE BAIXA
		GENERAL_HI			; VARIÁVEL GERAL PARTE ALTA
		
		ANG_SPEED_LO			; VELOCIDADE ANGULAR
						; PARTE BAIXA
		REG_74_LO
		REG_74_HI			;REGISTRADORES
				
	ENDC
	
	
	CBLOCK 0x7C
		PCLATH_TEMP
		W_TEMP
		STATUS_TEMP
		FSR_TEMP
	ENDC


	CBLOCK 0xA0
	
		A_LO_LPA			; VARIÁVEL DO USUÁRIO LSB
		A_HI_LPA			; VARIÁVEL DO USUÁRIO MSB
				
		B_LO_LPA			; VARIÁVEL DO USUÁRIO LSB
		B_HI_LPA			; VARIÁVEL DO USUÁRIO MSB
		
		C_LO_LPA			; VARIÁVEL DO USUÁRIO LSB
		C_HI_LPA			; VARIÁVEL DO USUÁRIO MSB
		
		D_LO_LPA			; VARIÁVEL DO USUÁRIO LSB
		D_HI_LPA			; VARIÁVEL DO USUÁRIO MSB
				
		E_LO_LPA			; VARIÁVEL DO USUÁRIO LSB
		E_HI_LPA			; VARIÁVEL DO USUÁRIO MSB
		
		F_LO_LPA			; VARIÁVEL DO USUÁRIO LSB
		F_HI_LPA			; VARIÁVEL DO USUÁRIO MSB
		
		G_LO_LPA			; VARIÁVEL DO USUÁRIO LSB
		G_HI_LPA			; VARIÁVEL DO USUÁRIO MSB
				
		H_LO_LPA			; VARIÁVEL DO USUÁRIO LSB
		H_HI_LPA			; VARIÁVEL DO USUÁRIO MSB
	
		A_CARACTER_LPA			; VARIÁVEL CARACTER DO USUÁRIO
		
		B_CARACTER_LPA			; VARIÁVEL CARACTER DO USUÁRIO
		
		C_CARACTER_LPA			; VARIÁVEL CARACTER DO USUÁRIO
		
		D_CARACTER_LPA			; VARIÁVEL CARACTER DO USUÁRIO
		
		E_CARACTER_LPA			; VARIÁVEL CARACTER DO USUÁRIO
		
		F_CARACTER_LPA			; VARIÁVEL CARACTER DO USUÁRIO
		
		G_CARACTER_LPA			; VARIÁVEL CARACTER DO USUÁRIO
		
		H_CARACTER_LPA			; VARIÁVEL CARACTER DO USUÁRIO
	
		A_LO_CASA1_LPA			; VARIÁVEL DO USUÁRIO LSB
		A_HI_CASA1_LPA			; VARIÁVEL DO USUÁRIO MSB
				
		B_LO_CASA1_LPA			; VARIÁVEL DO USUÁRIO LSB
		B_HI_CASA1_LPA			; VARIÁVEL DO USUÁRIO MSB
		
		C_LO_CASA1_LPA			; VARIÁVEL DO USUÁRIO LSB
		C_HI_CASA1_LPA			; VARIÁVEL DO USUÁRIO MSB
		
		D_LO_CASA1_LPA			; VARIÁVEL DO USUÁRIO LSB
		D_HI_CASA1_LPA			; VARIÁVEL DO USUÁRIO MSB
				
		A_LO_CASA2_LPA			; VARIÁVEL DO USUÁRIO LSB
		A_HI_CASA2_LPA			; VARIÁVEL DO USUÁRIO MSB
		
		B_LO_CASA2_LPA			; VARIÁVEL DO USUÁRIO LSB
		B_HI_CASA2_LPA			; VARIÁVEL DO USUÁRIO MSB
		
		C_LO_CASA2_LPA			; VARIÁVEL DO USUÁRIO LSB
		C_HI_CASA2_LPA			; VARIÁVEL DO USUÁRIO MSB
				
		D_LO_CASA2_LPA			; VARIÁVEL DO USUÁRIO LSB
		D_HI_CASA2_LPA			; VARIÁVEL DO USUÁRIO MSB
		
		RPM_LO				; ROTAÇÃO POR MINUTO LO
		RPM_HI				; ROTAÇÃO POR MINUTO HI
		
		ALETAS
		ALETAS_2

		ESP_74_LO
		ESP_74_HI			;REGISTRADORES
			
	ENDC
	
	CBLOCK 0xDC
		
		BUFFER_CORRIDO1			; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO2			; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO3			; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO4			; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO5			; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO6			; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO7			; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO8			; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO9			; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO10		; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO11		; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO12		; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO13		; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO14		; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO15		; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO16		; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO17		; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO18		; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO19		; BUFFER DO MODO CORRIDO
		BUFFER_CORRIDO20		; BUFFER DO MODO CORRIDO
		
	ENDC	
		
		
;*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  DEFINICAO DE FLAGS				*
;*	*	*	*	*	*	*	*	*	*	*	*


#DEFINE	CLK_I2C		    GOTO $+1				; PULSO DE CLOCK PARA I2C		

#DEFINE	TX_RX		    FLAGS0,0				; TX OU RX DE I2C?
								; 1 -> TX
								; 0 -> RX
	
#DEFINE HI_LO		    FLAGS0,1				; MOSTRA MENSAGEM EM
								; CIMA OU EM BAIXO?
								; 1 -> EM CIMA
								; 0 -> EM BAIXO
						
#DEFINE MODO_PGM	    FLAGS0,2				; ENTRA EM MODO DE PROG.
								; 1-> EM MODO DE PROGRAMACAO
								; 0-> EM MODO OPERACIONAL

#DEFINE ENABLE_ESCRITA	    FLAGS0,3				; HABILITA A ESCRITA NA MEMORIA
								; 1-> ESC. DADO NA MEMORIA
								; 0-> NAO ESCREVE NADA

#DEFINE TEM_PROG	    FLAGS0,4				; EXISTE PROGRAMA NA MEMÓRIA?
								; 1-> SIM
								; 0-> NÃO

#DEFINE ERRO		    FLAGS0,5				; ERRO NO TRATAMENTO DE DADOS
								; 1-> SIM
								; 0-> NÃO

#DEFINE FIM_PROG 	    FLAGS0,6				; FIM DO PROGRAMA
								; 1-> FIM DO PROGRAMA
								; 0-> NÃO	 
									
#DEFINE GRAVA_2		    FLAGS0,7				; DEVE GRAVAR O CARACTERE 2
								; 1-> SIM
								; 0-> NÃO
								

#DEFINE OPERACAO	    FLAGS1,0				; DEVE RETORNAR OU INCREMENTAR PONTEIRO?
								; 1-> RETORNAR
								; 0-> INCREMENTAR O PONTEIRO

#DEFINE F_INC		    FLAGS1,1				; DEVE INCREMENTAR O PONTEIRO?
								; 1-> NÃO
								; 0-> SIM

#DEFINE FUNCTION2	    FLAGS1,2				; DEVE PROCESSAR A SEGUNDA FUNÇÃO?
								; 1-> SIM
								; 0-> NÃO


#DEFINE FUNCTION2_DO	    FLAGS1,3				; DEVE PROCESSAR A SEGUNDA FUNÇÃO?
								; 1-> SIM
								; 0-> NÃO


#DEFINE OUTRO_ESTADO	    FLAGS1,4				; DEVE TRATAR O OUTRO BOTÃO?
								; 1-> SIM
								; 0-> NÃO
								

#DEFINE DADO_RX		    FLAGS1,5				; HÁ DADO NO BUFFER SERIAL?
								; 1-> SIM
								; 0-> NÃO


#DEFINE F_RTC		    FLAGS1,6				; AJUSTE DE HORA?
								; 1-> SIM
								; 0-> NÃO

#DEFINE ESTOURO_COUNTER1    FLAGS1,7				; ESTOURO DO COUNTER1 
								; 1-> SIM
								; 0-> NÃO
	

#DEFINE FREQ		    FLAGS2,0				; EM MODO FREQUÊNCIA?	
								; 1-> SIM
								; 0-> NÃO
								

#DEFINE F_CONVER	    FLAGS2,1				; DEVE ATUALIZAR REGISTRADORES DE CONVERSÃO?
								; 1-> SIM
								; 0-> NÃO


#DEFINE F_STOPWATCH	    FLAGS2,2				; DEVE PROCESSAR O CRONÔMETRO?
								; 1-> SIM
								; 0-> NÃO
								

#DEFINE F_DISPOUSERIAL	    FLAGS2,3				; DEVE ENVIAR PARA O DISPLAY OU SER?
								; 1-> SERIAL
								; 0-> DISPLAY


#DEFINE TIME_OU_STOP	    FLAGS2,4				; DEVE MOSTRAR A HORA OU STOP? 
								; 1-> HORA
								; 0-> STOPWATCH


#DEFINE PISCA_LED1          FLAGS2,5				; DEVE PISCAR O LED1?
								; 1-> SIM
								; 0-> NÃO
								

#DEFINE PISCA_LED2          FLAGS2,6				; DEVE PISCAR O LED2?
								; 1-> SIM
								; 0-> NÃO

#DEFINE ESCOLHE_RETORNO     FLAGS2,7				; DEVE RETORNAR OU INC?
								; 1-> SIM
								; 0-> NÃO

#DEFINE OR_TRUE	 	    FLAGS3,0				; DEVE PROCESSAR O AND?
								; 1-> SIM
								; 0-> NÃO

#DEFINE F_NEGACAO	    FLAGS3,1				; DEVE PROCESSAR A FUNÇÃO NEGAÇÃO? 
								; 1-> SIM
								; 0-> NÃO

#DEFINE F_DATA		    FLAGS3,2				; DEVE PROCESSAR A FUNÇÃO DATA?
								; 1-> SIM
								; 0-> NÃO


#DEFINE RESET		    FLAGS3,3				; DEVE RESETAR A MÁQUINA?
								; 1-> SIM
								; 0-> NÃO


#DEFINE OSC_RELE1	    FLAGS3,4				; DEVE OSCILAR O RELE 1 ?
								; 1-> SIM
								; 0-> NÃO


#DEFINE OSC_RELE2	    FLAGS3,5				; DEVE OSCILAR O RELE 2 ?
								; 1-> SIM
								; 0-> NÃO

#DEFINE OSC_RELE3	    FLAGS3,6				; DEVE OSCILAR O RELE 3 ?
								; 1-> SIM
								; 0-> NÃO

#DEFINE OSC_RELE4	    FLAGS3,7				; DEVE OSCILAR O RELE 4 ?
								; 1-> SIM
								; 0-> NÃO


#DEFINE OSC_RELE5	    FLAGS4,0				; DEVE OSCILAR O RELE 5 ?
								; 1-> SIM
								; 0-> NÃO

#DEFINE OSC_RELE6	    FLAGS4,1				; DEVE OSCILAR O RELE 6 ?
								; 1-> SIM
								; 0-> NÃO


#DEFINE F_IGUAL		    FLAGS4,2				; TESTA IGUAL?
								; 1-> SIM
								; 0-> NÃO


#DEFINE MODO_COUNTER	    FLAGS4,3				; MODO CONTADOR?
								; 1-> SIM
								; 0-> NÃO


#DEFINE OSC_DISPLAY	    FLAGS4,4				; DEVE OSCILAR O DISPLAY?
								; 1-> SIM
								; 0-> NÃO


#DEFINE FLAG_DISPLAY	    FLAGS4,5				; AUXILIAR DO DISPLAY
								
								

#DEFINE PERCENTAGEM	    FLAGS4,6				; DEVE TESTAR IGUALDADE?
								; 1-> SIM
								; 0-> NÃO


#DEFINE NUM_STRING	    FLAGS4,7				; DEVE TRATAR NUM OU CARACTER?
								; 1-> CARACTER
								; 0-> NUMÉRICO


#DEFINE MODO_SPEED	    FLAGS5,0				; MODO VELOCIDADE?
								; 1-> SIM
								; 0-> NÃO

#DEFINE MODO_VARIAVEL	    FLAGS5,1				; MODO VARIÁVEL?
								; 1-> SIM
								; 0-> NÃO

#DEFINE MODO_HIPOTENUSA	    FLAGS5,2				; MODO HIPOTENUSA?
								; 1-> SIM
								; 0-> NÃO

#DEFINE SHUTDOWN	    FLAGS5,3				; MODO SHUTDOWN?
								; 1-> SIM
								; 0-> NÃO

#DEFINE ECHO_DATA	    FLAGS5,4				; DEVE ECOAR DADOS?
								; 1-> SIM
								; 0-> NÃO

#DEFINE F_TERMINAL	    FLAGS5,5				; DEVE TRATAR O TERMINAL?
								; 1-> SIM
								; 0-> NÃO


#DEFINE	ACHOU_CARACTER	    FLAGS5,6				; ACHOU_CARACTER?
								; 1-> SIM
								; 0-> NÃO


#DEFINE	CAR_1		    FLAGS5,7				; ACHOU CARACTERE 1?
								; 1-> SIM
								; 0-> NÃO


#DEFINE	CAR_2		    FLAGS6,0				; ACHOU CARACTERE 2?
								; 1-> SIM
								; 0-> NÃO

#DEFINE	CAR_3		    FLAGS6,1				; ACHOU CARACTERE 3?
								; 1-> SIM
								; 0-> NÃO

#DEFINE	CAR_4		    FLAGS6,2				; ACHOU CARACTERE 4?
								; 1-> SIM
								; 0-> NÃO


#DEFINE	GAME_WINNER	    FLAGS6,3				; VENCEU O JOGO?
								; 1-> SIM
								; 0-> NÃO


#DEFINE	F_GERAL		    FLAGS6,4				; FLAG DE USO GERAL
								; 1-> SIM
								; 0-> NÃO


#DEFINE	MODO_RPM 	    FLAGS6,5				; DEVE CONVERTER PARA RPM?
								; 1-> SIM
								; 0-> NÃO

#DEFINE	MODO_PERIODIMETRO    FLAGS6,6				; DEVE FPARA RPM?
								; 1-> SIM
								; 0-> NÃO

#DEFINE	PODE_CONVERTER	     FLAGS6,7				; DEVE MOSTRAR OS DADOS?
								; 1-> SIM
								; 0-> NÃO

#DEFINE	MODO_PANEL	     FLAGS7,0				; ESTÁ NO MODO PANEL?
								; 1-> SIM
								; 0-> NÃO

#DEFINE	FIM_TERM	     FLAGS7,1				; SAI DO TERM?
								; 1-> SIM
								; 0-> NÃO
								
#DEFINE FLAG1_LPA	    FLAG_LPA,0				; FLAG DO SISTEMA
								; 1-> TRUE
								; 0-> FALSE
								

#DEFINE FLAG2_LPA	    FLAG_LPA,1				; FLAG DO SISTEMA
								; 1-> TRUE
								; 0-> FALSE

#DEFINE FLAG3_LPA	    FLAG_LPA,2				; FLAG DO SISTEMA
								; 1-> TRUE
								; 0-> FALSE

#DEFINE FLAG4_LPA	    FLAG_LPA,3				; FLAG DO SISTEMA
								; 1-> TRUE
								; 0-> FALSE
		
#DEFINE FLAG5_LPA	    FLAG_LPA,4				; FLAG DO SISTEMA
								; 1-> TRUE
								; 0-> FALSE

#DEFINE FLAG6_LPA	    FLAG_LPA,5				; FLAG DO SISTEMA
								; 1-> TRUE
								; 0-> FALSE

#DEFINE FLAG7_LPA	    FLAG_LPA,6				; FLAG DO SISTEMA
								; 1-> TRUE
								; 0-> FALSE

#DEFINE FLAG8_LPA	    FLAG_LPA,7				; FLAG DO SISTEMA
								; 1-> TRUE
								; 0-> FALSE
				
								
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		  DEFINICAO DE CONSTANTES					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

#DEFINE	ACK		      0x06
#DEFINE	NACK       	      0x15
#DEFINE	STX	  	      0x02
#DEFINE	ETX	   	      0x03
#DEFINE	LINHA_SUP 	      0x80
#DEFINE LINHA_INF  	      0xC0
#DEFINE	SOH		      0x01
#DEFINE LF		      0x0A
#DEFINE CR		      0x0D
#DEFINE FIM_PGM		      .250
#DEFINE LIMITE_COMANDOS	      .200
#DEFINE FIM_REPEAT	      .253
#DEFINE ELSE_IF		      .252	
#DEFINE FIM_DO_SE             .255
#DEFINE FIM_DO_WHILE	      .254
#DEFINE FIM_PROG_USU	      .250	
	
#DEFINE MENSAGEM_INTRO_HI     .255
#DEFINE MENSAGEM_INTRO_LO     .15
#DEFINE MENSAGEM_PROG_HI      .31
#DEFINE MENSAGEM_PROG_LO      .47
#DEFINE MENSAGEM_WAIT_HI      .63	
#DEFINE MENSAGEM_WAIT_LO      .79	
#DEFINE MENSAGEM_ERRO_HI      .95 
#DEFINE	MENSAGEM_ERRO_LO      .111	

#DEFINE LIMPA_DISPLAY	      .1
#DEFINE LIMPA_LCD	      .1

#DEFINE FATORIAL_0	      .1
#DEFINE FATORIAL_1	      .1
#DEFINE FATORIAL_2	      .2
#DEFINE FATORIAL_3	      .6
#DEFINE FATORIAL_4	      .24
#DEFINE FATORIAL_5	      .120
#DEFINE FATORIAL_6	      .720
#DEFINE FATORIAL_7	      .5040
#DEFINE FATORIAL_8	      .40320

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		DEFINICAO DE ENTRADAS					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

#DEFINE	INPUT1	   PORTB,5
#DEFINE	INPUT2	   PORTB,7
#DEFINE	INPUT3	   PORTA,3
#DEFINE INPUT4	   PORTB,6
#DEFINE	INPUT5	   PORTB,4
#DEFINE	INPUT6	   PORTA,4
#DEFINE	RX_DATA	   PORTB,1
#DEFINE COMP	   PORTA,5
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		 DEFINICAO DE SAÍDAS					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

#DEFINE	CLOCK	 PORTB,0
#DEFINE	DATA_	 PORTA,3
#DEFINE	ENABLE	 PORTA,2
#DEFINE	RS	 PORTA,3
#DEFINE	SCL	 PORTA,0
#DEFINE	TX_DATA	 PORTB,2

#DEFINE	DB4	 PORTB,4
#DEFINE DB5 	 PORTB,5
#DEFINE DB6	 PORTB,6
#DEFINE DB7	 PORTB,7

;#DEFINE RELE1	 REG_595,0
;#DEFINE RELE2	 REG_595,1
;#DEFINE RELE3	 REG_595,2
;#DEFINE RELE4	 REG_595,3
;#DEFINE RELE5	 REG_595,4
;#DEFINE RELE6	 REG_595,5

#DEFINE RELE1NEG	REG_74_LO,0
#DEFINE RELE1POS	REG_74_LO,1
#DEFINE RELE2NEG	REG_74_LO,2
#DEFINE RELE2POS	REG_74_LO,3
#DEFINE RELE3NEG	REG_74_LO,4
#DEFINE	RELE3POS	REG_74_LO,5
#DEFINE RELE4NEG	REG_74_LO,6
#DEFINE RELE4POS	REG_74_LO,7
#DEFINE LED1	 	REG_74_HI,0
#DEFINE RELE5NEG	REG_74_HI,2
#DEFINE RELE5POS	REG_74_HI,1
#DEFINE	RELE6		REG_74_HI,3			
#DEFINE LED2	 	REG_74_HI,4
						;REGISTRADORES PARA O RELÉ 

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	 	  		  DEFINICAO DE ENTRADAS/SAÍDAS				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

#DEFINE SDA 	 PORTA,1
#DEFINE TRIS_SDA TRISA,1

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  	INICIALIZAÇÃO DA EEPROM						*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

	ORG 0x2100
	
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	DE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		VETOR DE RESET						*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

	ORG 0x0000
RESETA
	MOVLW	B'00000111'
	MOVWF	CMCON			; DESLIGA O COMPARADOR
        PAGE1
	GOTO	CONFIG_

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  	      VETOR DE INTERRUPÇÃO					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

	ORG 0x0004
SALVA_CONTEXTO
	CLRWDT				; LIMPA WDT
	MOVWF	W_TEMP
	SWAPF	STATUS,W
	MOVWF	STATUS_TEMP
	MOVF	FSR,W	
	MOVWF	FSR_TEMP	
	MOVF	PCLATH,W
	MOVWF	PCLATH_TEMP
	
	CLRF	STATUS
	CLRF	PCLATH
	
	MOVF	W_TEMP,W
	ADDWF	RANDOM,F
	
	BTFSC	PIR1,RCIF
	GOTO	ISR_SERIAL	
		
	BTFSC	PIR1,TMR1IF
	GOTO	ISR_TIMER1
	
	;BTFSC	INTCON,T0IF
	GOTO	ISR_T0IF


RECUPERA_CONTEXTO
SAI_INT
	MOVF	PCLATH_TEMP,W
	MOVWF	PCLATH
	MOVF	FSR_TEMP,W
	MOVWF	FSR
	SWAPF	STATUS_TEMP,W
	MOVWF	STATUS
	SWAPF	W_TEMP,F
	SWAPF	W_TEMP,W
	RETFIE

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  TRATAMENTO DAS ISR´S					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		          ISR RBIF						*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

ISR_T0IF
	
	BCF	INTCON,T0IF
	
	;RLF	RANDOM,W
	
	MOVLW	.255
	MOVWF	TMR0
	
	BTFSC	MODO_COUNTER
	GOTO	MODO_FREQUENCIMETRO
	
	BTFSC	FREQ
	GOTO	MODO_FREQUENCIMETRO
	
	DECFSZ	COUNTER1_LO,F
	GOTO	SAI_INT
	
	DECFSZ	COUNTER1_HI,F
	GOTO	SAI_INT
	
	MOVF	ESP_COUNTER1_LO,W
	MOVWF	COUNTER1_LO
	MOVF	ESP_COUNTER1_HI,W
	MOVWF	COUNTER1_HI
	
	BSF	ESTOURO_COUNTER1
	
	GOTO	SAI_INT

MODO_FREQUENCIMETRO

	INCF	COUNTER1_LO,F
	BTFSC	STATUS,Z
	INCF	COUNTER1_HI,F
	
	BANK1
	DECF	ALETAS_2,F
	BANK0
	BTFSS	STATUS,Z
	GOTO	SAI_INT
		
	BANK1
	MOVF	ALETAS,W
	MOVWF	ALETAS_2
	INCF	RPM_LO,F
	BTFSC	STATUS,Z
	INCF	RPM_HI,F
	BANK0
	
	GOTO	SAI_INT

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		        ISR TIMER 1 - RTC					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

ISR_TIMER1

	BCF	PIR1,TMR1IF
	
	;COMF	RANDOM,F
	
	MOVLW	LOW  .3036
	ADDWF	TMR1L,F
	BTFSC	STATUS,C
	INCF	TMR1H,F
	
	MOVLW	HIGH .3036
	ADDWF	TMR1H,F
	
	BTFSC	PISCA_LED1
	CALL	OSC_LED1
	
	BTFSC	PISCA_LED2
	CALL	OSC_LED2
		
	BTFSC	OSC_RELE1
	CALL	OSCILA_RELE1
	
	BTFSC	OSC_RELE2
	CALL	OSCILA_RELE2
	
	BTFSC	OSC_RELE3
	CALL	OSCILA_RELE3
	
	BTFSC	OSC_RELE4
	CALL	OSCILA_RELE4
	
	BTFSC	OSC_RELE5
	CALL	OSCILA_RELE5
	
	BTFSC	OSC_RELE6
	CALL	OSCILA_RELE6
	
	BTFSS	OSC_DISPLAY
	GOTO	ISR_TIMER1_B
	
	BTFSC	FLAG_DISPLAY
	GOTO	ISR_TIMER1_A	
	BSF	FLAG_DISPLAY
	MOVLW	B'00001000'
	CALL	LCD_COMANDO
	GOTO	ISR_TIMER1_B
			
ISR_TIMER1_A

	BCF	FLAG_DISPLAY
	MOVLW	B'00001100'
	CALL	LCD_COMANDO
		
ISR_TIMER1_B
	
	BTFSC	MODO_SPEED
	INCF	TEMPO_VELOCIMETRO,F
	
	BTFSS	SHUTDOWN		; ESTÁ EM MODO SHUTDOWN?
	GOTO	ISR_TIMER1_X		; NÃO
	
	DECFSZ	REG_SHUTDOWN,F		; CHEGOU AO FIM DA CONTAGEM?
	GOTO	ISR_TIMER1_X		; NÃO
					; SIM!

	MOVLW	B'00001000'		; DESLIGA O 
	CALL	LCD_COMANDO		; LCD
	
	CLRF	REG_74_LO
	CLRF	REG_74_HI		; DESLIGA O SHIFT-REGISTER
	
	CALL	OUT_DADOS_B		; DESLIGA TODAS AS SAÍDAS
	
	SLEEP				; ENTRA EM MODO DE BAIXO CONSUMO
	
	CLRWDT	
	GOTO	$-1	

ISR_TIMER1_X
		
	DECFSZ	VEZES_RTC,F
	GOTO	SAI_INT
	
	BTFSC	F_TERMINAL
	DECF	TEMPO_TERMINAL,F
	
	;GOTO	$+4
	;BTFSC	STATUS,Z		;CHEGOU AO FIM?
	;BSF	FIM_TERM		;SIM, ENTÃO ATUALIZA
	
	MOVLW	.2
	MOVWF	VEZES_RTC
	
	BTFSS	FREQ
	GOTO	ISR_TIMER1_C
	
	BTFSC	MODO_RPM
	GOTO	CARREGA_RPM
		
	MOVF	COUNTER1_LO,W
	MOVWF	LSB
	MOVWF	ANG_SPEED_LO		; SALVA PARTE BAIXA PARA CALCULAR 
					; VELOCIDADE ANGULAR
	MOVF	COUNTER1_HI,W
	MOVWF	MSB
	CLRF	COUNTER1_HI
	CLRF	COUNTER1_LO
	BSF	F_CONVER
	GOTO	ISR_TIMER1_C
	
CARREGA_RPM
	
	BANK1
	MOVF	RPM_LO,W
	CLRF	RPM_LO
	BANK0
	MOVWF	LSB
	
	BANK1
	MOVF	RPM_HI,W
	CLRF	RPM_HI
	BANK0
	MOVWF	MSB
	
	BSF	F_CONVER

ISR_TIMER1_C
	
	BSF	F_DATA
	MOVLW	SEGUNDO
	CALL	AJUSTA_REGS_HORA
	BCF	F_DATA
	
	BTFSS	F_STOPWATCH
	GOTO	SAI_INT
	
	MOVLW	STOPWATCH_SEGUNDO
	CALL	AJUSTA_REGS_HORA

	;MOVLW	.30
	;SUBWF	RANDOM,F
	
	GOTO	SAI_INT
	
AJUSTA_REGS_HORA

	MOVWF	FSR
	INCF	INDF,F
	MOVLW	.60
	XORWF	INDF,W
	BTFSS	STATUS,Z
	RETURN
	
	CLRF	INDF
	;INCF	FSR,F
	DECF	FSR,F
	
	INCF	INDF,F
	MOVLW	.60
	XORWF	INDF,W
	BTFSS	STATUS,Z
	RETURN
	
	CLRF	INDF
	;INCF	FSR,F
	DECF	FSR,F
	
	INCF	INDF,F
	MOVLW	.24
	XORWF	INDF,W
	BTFSS	STATUS,Z
	RETURN
	CLRF	INDF
	
	BTFSS	F_DATA
	RETURN
	
	INCF	DIA,F
	CALL	RETORNA_MES
	XORWF	DIA,W
	BTFSS	STATUS,Z
	RETURN
	MOVLW	.1
	MOVWF	DIA
	
	INCF	MES,F
	MOVLW	.13
	XORWF	MES,W
	BTFSS	STATUS,Z
	RETURN
	MOVLW	.1
	MOVWF	MES
	
	INCF	ANO,F
	RETURN

RETORNA_MES
	
	MOVLW	HIGH SALTO_MES
	MOVWF	PCLATH
	MOVF	MES,W
	ADDLW	LOW  SALTO_MES
	BTFSC	STATUS,C
	INCF	PCLATH
	MOVWF	PCL
SALTO_MES
	NOP
	RETLW	.32		; JANEIRO
	GOTO	TRATA_FEVEREIRO
	RETLW	.32		; MARÇO
	RETLW	.31		; ABRIL
	RETLW	.32		; MAIO
	RETLW	.31		; JUNHO
	RETLW	.32		; JULHO
	RETLW	.32		; AGOSTO
	RETLW	.31		; SETEMBRO
	RETLW	.32		; OUTUBRO
	RETLW	.31		; NOVEMBRO
	RETLW	.32		; DEZEMBRO
	

TRATA_FEVEREIRO

	MOVF	ANO,F
	BTFSC	STATUS,Z
	RETLW	.30
	
	MOVLW	.4
	XORWF	ANO,W
	BTFSC	STATUS,Z
	RETLW	.30
	
	MOVLW	.8
	XORWF	ANO,W
	BTFSC	STATUS,Z
	RETLW	.30
	
	MOVLW	.12
	XORWF	ANO,W
	BTFSC	STATUS,Z
	RETLW	.30
	
	MOVLW	.16
	XORWF	ANO,W
	BTFSC	STATUS,Z
	RETLW	.30
	
	MOVLW	.20
	XORWF	ANO,W
	BTFSC	STATUS,Z
	RETLW	.30
	
	RETLW	.29

	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		      ISR USART							*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

ISR_SERIAL
	
	;BCF	PIR1,RCIF
	
	;INCF	RANDOM,F
	
	BTFSS	RCSTA,FERR			; ERRO DE QUADRO?
	GOTO	ISR_SERIAL_A			; NÃO
						; SIM
	MOVF	RCREG,W
	MOVLW	NACK
	CALL	TXDATA_TO_PC
	GOTO	SAI_INT

ISR_SERIAL_A
	
	MOVF	RCREG,W
	MOVWF	BUFFER_RX
	XORLW	STX
	BTFSS	STATUS,Z
	GOTO	ISR_SERIAL_B
	INCF	CONTADOR_USART,F
	BTFSS	CONTADOR_USART,3
	GOTO	SAI_INT
	CLRF	CONTADOR_USART
		
	CALL	LIMPA_PONTEIRO
	
	;BSF	HI_LO
	;MOVLW	MENSAGEM_PROG_HI
	;CALL	MOSTRA_MENSAGENS
	;BCF	HI_LO
	;MOVLW	MENSAGEM_PROG_LO
	;CALL	MOSTRA_MENSAGENS
	
	MOVLW	ACK
	CALL	TXDATA_TO_PC	

ISR_PROG
	CLRWDT
	BTFSS	PIR1,RCIF
	GOTO	ISR_PROG
	MOVF	RCREG,W
	MOVWF	BUFFER_RX
	MOVLW	ACK
	CALL	TXDATA_TO_PC
	
	CALL	I2C_WRITE
	CALL	INC_PONTEIRO
		
	MOVLW	STX
	XORWF	BUFFER_RX,W
	BTFSS	STATUS,Z
	GOTO	LIMPA_CONTAGEM
	INCF	CONTADOR_USART,F
	BTFSS	CONTADOR_USART,3
	GOTO	ISR_PROG
	
	BANK1
	MOVLW	B'10111000'
	MOVWF	OPTION_REG
	GOTO	$

LIMPA_CONTAGEM
	
	CLRF	CONTADOR_USART
	GOTO	ISR_PROG
	
ISR_SERIAL_X
	
	;BTFSS	ENABLE_ESCRITA
	;GOTO	SAI_INT
	;GOTO	ESCREVE_MEMORIA_PROG
	
ISR_SERIAL_B	
	
	CLRF	CONTADOR_USART
	;BTFSS	ENABLE_ESCRITA
	;GOTO	ISR_SERIAL_C
	;GOTO	ESCREVE_MEMORIA_PROG
	
ISR_SERIAL_C

	MOVF	BUFFER_RX,W
	XORLW	.1
	BTFSC	STATUS,Z
	GOTO	AJUSTE_RTC
	MOVF	BUFFER_RX,W
	MOVWF	BUFFER_SERIAL
	BTFSC	ECHO_DATA
	CALL	TXDATA_TO_PC
	BSF	DADO_RX
	GOTO	SAI_INT
 
AJUSTE_RTC
	
	MOVLW	ACK
	CALL	TXDATA_TO_PC
	
	CALL	RECEBE_CARACTERE
	MOVWF	HORA
		
	CALL	RECEBE_CARACTERE
	MOVWF	MINUTO
	
	CALL	RECEBE_CARACTERE
	MOVWF	SEGUNDO
	
	CALL	RECEBE_CARACTERE
	MOVWF	DIA
	
	CALL	RECEBE_CARACTERE
	MOVWF	MES
	
	CALL	RECEBE_CARACTERE
	MOVWF	ANO
	
	MOVLW	ACK
	CALL	TXDATA_TO_PC
	
	;BCF	INTCON,GIE
	;BCF	PIR1,RCIF
	GOTO	SAI_INT

RECEBE_CARACTERE
	
	;CLRWDT
	BTFSS	PIR1,RCIF
	GOTO	$-1
	;BCF	PIR1,RCIF
	MOVF	RCREG,W
	RETURN	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		   SUB-ROTINAS							*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	  	                         OSCILAÇÃO DE LED					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

OSC_LED1

	BTFSC	LED1
	GOTO	$+3
	BSF	LED1
	GOTO	OUT_DADOS_B
	BCF	LED1
	GOTO	OUT_DADOS_B
	

OSC_LED2

	BTFSC	LED2
	GOTO	$+3
	BSF	LED2
	GOTO	OUT_DADOS_B
	BCF	LED2
	GOTO	OUT_DADOS_B
	
OSCILA_RELE1
	
	BTFSC	RELE1POS
	GOTO	$+4
	BCF	RELE1NEG
	BSF	RELE1POS
	GOTO	OUT_DADOS_B
	BSF	RELE1NEG
	BCF	RELE1POS
	GOTO	OUT_DADOS_B
	
OSCILA_RELE2
	
	BTFSC	RELE1POS
	GOTO	$+4
	BCF	RELE2NEG
	BSF	RELE2POS
	GOTO	OUT_DADOS_B
	BSF	RELE2NEG
	BCF	RELE2POS
	GOTO	OUT_DADOS_B

OSCILA_RELE3
	
	BTFSC	RELE3POS
	GOTO	$+4
	BCF	RELE3NEG
	BSF	RELE3POS
	GOTO	OUT_DADOS_B
	BSF	RELE3NEG
	BCF	RELE3POS
	GOTO	OUT_DADOS_B

OSCILA_RELE4
	
	BTFSC	RELE4POS
	GOTO	$+4
	BCF	RELE4NEG
	BSF	RELE4POS
	GOTO	OUT_DADOS_B
	BSF	RELE4NEG
	BCF	RELE4POS
	GOTO	OUT_DADOS_B

OSCILA_RELE5
	
	BTFSC	RELE5POS
	GOTO	$+4
	BCF	RELE5NEG
	BSF	RELE5POS
	GOTO	OUT_DADOS_B
	BSF	RELE5NEG
	BCF	RELE5POS
	GOTO	OUT_DADOS_B

OSCILA_RELE6
	
	BTFSC	RELE6
	GOTO	$+3
	BSF	RELE6
	GOTO	OUT_DADOS_B
	BCF	RELE6
	GOTO	OUT_DADOS_B
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*   	             ROTINA DE CONVERSÃO BINÁRIO PARA DECIMAL				*	*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

CONVERSAO_FREQUENCIA
	
	
	BCF	F_CONVER

	BTFSS	MODO_PERIODIMETRO	; ESTÁ EM MODO PERIODÍMETRI
	GOTO	BIN_TO_DEC		; ENTAO CONVERTE OS DADOS

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*  	             ROTINA DE CONVERSÃO DE FREQUENCIA PARA PERÍODO			*	*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

CONVERTE_TO_PERIODO
	
	MOVLW	.250
	MOVWF	MULTIPLICADOR_DIVIDENDO
	
	RRF	MSB
	RRF	LSB
	
	RRF	MSB
	RRF	LSB,W
	MOVWF	MULTIPLICANDO_DIVISOR
	
	PAGE1
	CALL	DIVIDE
	PAGE0
	
	MOVF	RESULTADO_LO,W
	MOVWF	LSB
	CLRF	MSB
	BSF	PODE_CONVERTER
	
BIN_TO_DEC
	
	CLRF	CONVERSAO_0
	CLRF	CONVERSAO_1
	CLRF	CONVERSAO_2
	CLRF	CONVERSAO_3
	CLRF	CONVERSAO_4
		
	MOVF	LSB,F
	BTFSS	STATUS,Z
	GOTO	INC_MSB
	
	MOVF	MSB,F
	BTFSC	STATUS,Z
	RETURN
	
	MOVF	LSB,F
	BTFSC	STATUS,Z
	GOTO	CONVERSAO_A
	
INC_MSB	

	INCF	MSB,F
		
CONVERSAO_A

	;CLRWDT
	INCF	CONVERSAO_0,F
	MOVLW	.10
	XORWF	CONVERSAO_0,W
	BTFSS	STATUS,Z
	GOTO	CONVERSAO_B
	
	CLRF	CONVERSAO_0
	INCF	CONVERSAO_1,F
	MOVLW	.10
	XORWF	CONVERSAO_1,W
	BTFSS	STATUS,Z
	GOTO	CONVERSAO_B
	
	CLRF	CONVERSAO_1
	INCF	CONVERSAO_2,F
	MOVLW	.10
	XORWF	CONVERSAO_2,W
	BTFSS	STATUS,Z
	GOTO	CONVERSAO_B
	
	CLRF	CONVERSAO_2
	INCF	CONVERSAO_3,F
	MOVLW	.10
	XORWF	CONVERSAO_3,W
	BTFSS	STATUS,Z
	GOTO	CONVERSAO_B
	
	CLRF	CONVERSAO_3
	INCF	CONVERSAO_4,F
	
CONVERSAO_B	

	DECFSZ	LSB,F
	GOTO	CONVERSAO_A
	
	DECFSZ	MSB,F
	GOTO	CONVERSAO_A
		
	RETURN	


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		LIMPEZA DO PONTEIRO						*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

LIMPA_PONTEIRO
	CLRF	ENDERECO_LO
	CLRF	ENDERECO_HI	
	RETURN

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	 	    ESCREVE DADOS NA MEMÓRIA DE PROGRAMA			*
;*	*	*	*	*	*	*	*	*	*	*	*	* 	*	*	*

;ESCREVE_MEMORIA_PROG
	
	;CALL	I2C_WRITE
	;CALL	INC_PONTEIRO
	;MOVLW	ACK
	;CALL	TXDATA_TO_PC
	;GOTO	SAI_INT
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		  INCREMENTO DE PONTEIRO					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

INC_PONTEIRO
	INCF	ENDERECO_LO,F
 	BTFSC	STATUS,Z
	INCF	ENDERECO_HI,F
	RETURN

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  	  ENVIO DE DADOS PARA O PC					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
	
TXDATA_TO_PC
	
	BANK1
	BTFSS	TXSTA,TRMT
	GOTO	$-1
	BANK0
	MOVWF	TXREG
	RETURN

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	  		  CONFIGURAÇÃO DOS PINOS COMO SAÍDA				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

CONFIG_TRIS_OUT
	BANK1
	MOVLW	B'00001111'
	ANDWF	TRISB,F
	BCF	TRISA,3
	BANK0
	;CALL	CLOCK_I2C
	CLK_I2C
	RETURN

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	   		CONFIGURAÇÃO DOS PINOS COMO ENTRADA				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

CONFIG_TRIS_IN
	BANK1
	MOVLW	B'11110000'
	IORWF	TRISB,F
	BSF	TRISA,3	
	BANK0
	RETURN

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*  		  ENVIO DE DADOS PARA LCD DE 4 BITS				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

LCD_COMANDO_4					; ENVIA COMANDOS DE 4 BITS
						; NIBBLE DE D3..D0 (-SIG)

	;CLRWDT
	;BCF	RS				; PREPARA ENVIO DE UM COMANDO
	MOVWF	CARACTER			; CARREGA COMANDO QUE SERÁ ENVIADO
	CALL	CONFIG_TRIS_OUT
	BCF	RS
	GOTO	ENVIA_DISP_4			; ENVIA...

LCD_COMANDO
	
	MOVWF	CARACTER
	CALL	CONFIG_TRIS_OUT
	BCF	RS
	GOTO	ENVIA_DISP_A
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		 ENVIO DE DADOS PARA LCD					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

ENVIA_DISP
	
	MOVWF	CARACTER
	CALL	CONFIG_TRIS_OUT
	BSF	RS
ENVIA_DISP_A
	
	;CLRWDT					; INICIA O WATCH DOG TIMER
	BCF	DB7
	BTFSC	CARACTER,7
	BSF	DB7

	BCF	DB6
	BTFSC	CARACTER,6
	BSF	DB6

	BCF	DB5
	BTFSC	CARACTER,5
	BSF	DB5

	BCF	DB4
	BTFSC	CARACTER,4
	BSF	DB4			; COPIA BITS +SIG DE CARACTER PARA D7..D4
	
	GOTO	$+1			; TEMPO DE ESTABILIZAÇÃO				
	GOTO	$+1			; TEMPO DE ESTABILIZAÇÃO				
	
	BCF	ENABLE
	CALL    DELAY_DISP3		; CHAMA DELAY DE +/- 150us
	BSF	ENABLE			; PROVOCA PULSO NO ENABLE	

ENVIA_DISP_4				; ENVIA SOMENTE OS 4 BITS (-SIG) DO REG. E_LCD_VAR

	BCF	DB7
	BTFSC	CARACTER,3
	BSF	DB7

	BCF	DB6
	BTFSC	CARACTER,2
	BSF	DB6

	BCF	DB5
	BTFSC	CARACTER,1
	BSF	DB5

	BCF	DB4
	BTFSC	CARACTER,0
	BSF	DB4					; COPIA BITS -SIG DE E_LCD_VAR PARA D7..D4
	
	GOTO	$+1			; TEMPO DE ESTABILIZAÇÃO				
	GOTO	$+1			; TEMPO DE ESTABILIZAÇÃO				
	
	BCF	ENABLE
	CALL    DELAY_DISP3		; CHAMA DELAY DE +/- 150us
	BSF	ENABLE				; PROVOCA PULSO NO ENABLE	

	BSF	RS					; SELECIONA PADRÃO DE ENVIO DE UM CARACTER
	CALL	CONFIG_TRIS_IN
	
	MOVLW	.220
	CALL    DELAY_DISP2		; CHAMA DELAY DE +/- 150us
	MOVLW	.220
	GOTO    DELAY_DISP2		; CHAMA DELAY DE +/- 150us
	
	;RETURN					; RETORNA

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  ROTINA DE DELAY						*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DELAY_DISP
	
	MOVLW	.15
	
DELAY_MS

	;CLRWDT
	MOVWF	TEMPO1
	MOVLW	.255
	MOVWF	TEMPO2
	
	;BTFSC	MODO_PGM			; DEVE ENTRAR EM MODO DE PROGRAMAÇÃO?
	;RETURN
	;NOP
	;NOP
	;INCF	RANDOM,F
	DECFSZ	TEMPO2,F
	GOTO	$-1
	DECFSZ	TEMPO1,F
	GOTO	$-4
	RETURN
	
DELAY_SEG
	MOVWF	TEMPO1
	
	MOVLW	.255
	MOVWF	TEMPO2
	MOVWF	TEMPO3
	MOVLW	.5
	MOVWF	TEMPO4
	
VERIFICA_PROG
	
	;BTFSC	MODO_PGM
	;RETURN
	;NOP
	;NOP
	;CLRWDT
	DECFSZ	TEMPO2,F
	GOTO	$-1
	DECFSZ	TEMPO3,F
	GOTO	VERIFICA_PROG
	DECFSZ	TEMPO4,F
	GOTO	VERIFICA_PROG
	MOVLW	.5
	MOVWF	TEMPO4
	DECFSZ	TEMPO1,F
	GOTO	VERIFICA_PROG
 	RETURN	

DELAY_DISP3
	
	MOVLW	.30
	
DELAY_DISP2
	;MOVLW	.255
	MOVWF	TEMPO1
	
	DECFSZ	TEMPO1,F
	GOTO	$-1
	RETURN

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  	ROTINAS I2C							*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		     CLOCK I2C							*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

;CLOCK_I2C
	;GOTO	$+1
	;GOTO	$+1
	;GOTO	$+1
	;GOTO	$+1
	;RETURN


I2C_WRITE
	
	;CLRWDT
	;BCF	INTCON,GIE
	CALL	I2C_ENVIA_CONT_END
	MOVF	BUFFER_RX,W
	MOVWF	BUFFER_I2C
	CALL	TX_I2C
	BSF	TX_RX
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		 ROTINA DE STOP I2C						*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

STOP_I2C
	
	BCF	SDA
	BANK1
	BCF	TRIS_SDA
	BANK0
	
	;CALL	CLOCK_I2C
	;BSF	SCL
	;CALL	CLOCK_I2C
	;BSF	SDA
	;CALL	CLOCK_I2C
	
	CLK_I2C
	BSF	SCL
	CLK_I2C
	BSF	SDA
	CLK_I2C
	
	MOVLW	.5
	BTFSC	TX_RX
	GOTO	DELAY_MS
	
	BSF	INTCON,GIE
	RETURN
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  ROTINA DE START I2C					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
		
START_I2C
	
	BSF	SCL
	BSF	SDA
	BANK1
	BCF	TRIS_SDA
	BANK0
	BCF	SDA					; CONDICAO DE START		
	;CALL	CLOCK_I2C
	CLK_I2C
	BCF	SCL
	CLK_I2C
	;GOTO	CLOCK_I2C
	RETURN
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		  ROTINA DE TRANSMISSÃO I2C					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TX_I2C
	
	MOVLW	.8
	MOVWF	CONTADOR
	
	BANK1
	BCF	TRIS_SDA
	BANK0
	
TX_I2C_A

	BCF	STATUS,C
	RLF	BUFFER_I2C,F
	
	BTFSC	STATUS,C
	BSF	SDA
	BTFSS	STATUS,C
	BCF	SDA
	
	BSF	SCL	
	;CALL	CLOCK_I2C
	CLK_I2C
	BCF	SCL	
	
	DECFSZ	CONTADOR,F
	GOTO	TX_I2C_A
	
	BTFSS	TX_RX
	GOTO	I2C_IO
	BANK1
	BSF	TRIS_SDA
	BANK0

I2C_WRITE_C	
	BSF	SCL
	;CALL	CLOCK_I2C
	CLK_I2C
	BCF	SCL
	RETURN

I2C_IO
	BCF	SDA
	GOTO	I2C_WRITE_C
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  ROTINA DE LEITURA I2C					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

I2C_ENVIA_CONT_END
	BSF	TX_RX
	BCF	STATUS,C
	;RLF	ENDERECO_HI,W	
	;IORLW	B'10100000'		
	
	MOVLW	B'10100000'
	MOVWF	BUFFER_I2C
		
	CALL	START_I2C	
	CALL	TX_I2C
	
	MOVF	ENDERECO_HI,W
	MOVWF	BUFFER_I2C
	CALL	TX_I2C
	
	MOVF	ENDERECO_LO,W
	MOVWF	BUFFER_I2C
	GOTO	TX_I2C

I2C_READ

	;CLRWDT
	BCF	INTCON,GIE
	CALL	I2C_ENVIA_CONT_END	
	CALL	START_I2C
	
	BCF	STATUS,C
	;RLF	ENDERECO_HI,W
	MOVLW	B'10100001'
	MOVWF	BUFFER_I2C
	CALL	TX_I2C
		
	BANK1
	BSF	TRIS_SDA
	BANK0
	
	MOVLW	.8
	MOVWF	CONTADOR
		
I2C_READ_A
	
	BSF	SCL	
	;CALL	CLOCK_I2C
	CLK_I2C
	BCF	STATUS,C
	BTFSC	SDA
	BSF	STATUS,C
	RLF	BUFFER,F
	BCF	SCL
	DECFSZ	CONTADOR,F
	GOTO	I2C_READ_A
	BCF	TX_RX
	GOTO	STOP_I2C
		
MOSTRA_MENSAGENS
	
	MOVWF	PONTEIRO_DISP
	ADDLW	.16
	MOVWF	AUX1
	MOVLW	LINHA_SUP
	BTFSS	HI_LO
	MOVLW	LINHA_INF
	CALL	LCD_COMANDO

MOSTRA_MENSAGENS_A
	CALL	TABELA_DE_MENSAGENS
	CALL	ENVIA_DISP
	MOVF	PONTEIRO_DISP,W
	XORWF	AUX1,W
	BTFSS	STATUS,Z
	GOTO	MOSTRA_MENSAGENS_A
	RETURN

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  TABELA DE MENSAGENS					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TABELA_DE_MENSAGENS
	
	INCF	PONTEIRO_DISP,F
	MOVLW	HIGH SALTO_TABELA
	MOVWF	PCLATH
	
	MOVF	PONTEIRO_DISP,W
	ADDLW	LOW  SALTO_TABELA
	BTFSC	STATUS,C
	INCF	PCLATH,F
	MOVWF	PCL
	
SALTO_TABELA
	DT "Cerne Tecnologia"
	DT "PCL1001 Ver 1.0 "
	DT "    Modo de     "
	DT "  Programacao   "
	DT "   Aguardando   "
	DT "    Programa    "
	;DT "    Erro na     "
	;DT " Decodificacao  "	
		
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		  DECODIFICAÇÃO DE INSTRUÇÃO				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DECODIFICA_INSTRUCAO
	
	MOVLW	FIM_PGM
	XORWF	BUFFER,W
	BTFSS	STATUS,Z
	GOTO	$+3
	BCF	TEM_PROG
	RETURN
		
	MOVLW	FIM_DO_SE
	XORWF	BUFFER,W
	BTFSC	STATUS,Z
	GOTO	INC_PONTEIRO
	
	MOVLW	ELSE_IF
	XORWF	BUFFER,W
	BTFSC	STATUS,Z
	GOTO	SAI_DO_ELSE
	
	;MOVLW	LIMITE_COMANDOS
	;SUBWF	BUFFER,W
	;BTFSC	STATUS,C
	;GOTO	ERRO_COMANDO
	
	MOVLW	HIGH (SALTO_DEC_INSTRUCAO)
	MOVWF	PCLATH
	MOVF	BUFFER,W
	ADDLW	LOW  (SALTO_DEC_INSTRUCAO)
	BTFSC	STATUS,C
	INCF	PCLATH,F
	MOVWF	PCL

SALTO_DEC_INSTRUCAO
	GOTO	SETA_FLAG1_LPA			; OPCODE 00
	GOTO	SETA_FLAG2_LPA			; OPCODE 01
	GOTO	SETA_FLAG3_LPA			; OPCODE 02
	GOTO	INC_ADDR_EEPROM			; OPCODE 03
	GOTO	DEC_ADDR_EEPROM			; OPCODE 04
	GOTO	ESCREVE_EEPROM			; OPCODE 05
	GOTO	LE_EEPROM			; OPCODE 06
	GOTO	TXDATA_EEPROM			; OPCODE 07
	GOTO	CARREGA_ADDR			; OPCODE 08
	GOTO	RECEPCAO_SERIAL			; OPCODE 09
	GOTO	CLEAR_STOPWATCH			; OPCODE 10
	GOTO	LIGA_RELE1			; OPCODE 11
	GOTO	LIGA_RELE2			; OPCODE 12
	GOTO	LIGA_RELE3			; OPCODE 13
	GOTO	LIGA_RELE4			; OPCODE 14
	GOTO	LIGA_RELE5			; OPCODE 15
	GOTO	LIGA_RELE6			; OPCODE 16
	;GOTO	NOT_RELE			; OPCPDE 17
	;GOTO	ROTATE_LEFT			; OPCODE 18
	;GOTO	ROTATE_RIGHT			; OPCODE 19
	GOTO	ATRIBUI_A_AD_READ		; OPCODE 17
	GOTO	INC_PONTEIRO			; OPCODE 18
	GOTO	INC_PONTEIRO			; OPCODE 19
	GOTO	DISP2_DATE			; OPCODE 20
	GOTO	DESLIGA_RELE1			; OPCODE 21
	GOTO	DESLIGA_RELE2			; OPCODE 22
	GOTO	DESLIGA_RELE3			; OPCODE 23
	GOTO	DESLIGA_RELE4			; OPCODE 24
	GOTO	DESLIGA_RELE5			; OPCODE 25
	GOTO	DESLIGA_RELE6			; OPCODE 26
	GOTO	TRATA_DELAY_MS			; OPCODE 27		
	GOTO	TRATA_DELAY_SEG			; OPCODE 28 
	GOTO	TXPROG				; OPCODE 29
	GOTO	RECARREGA_PONTEIRO		; OPCODE 30		
	GOTO	AJUSTA_PWM			; OPCODE 31
	GOTO	INC_PWM				; OPCODE 32
	GOTO	DEC_PWM				; OPCODE 33
	GOTO	SET_PWM				; OPCODE 34
	GOTO	CLR_PWM				; OPCODE 35
	GOTO	DISP1_DATE			; OPCODE 36
	GOTO	LOAD_COUNTER6			; OPCODE 37
	GOTO	INPUT6_AS_COUNTER		; OPCODE 38
	GOTO	TXDATA_DATE			; OPCODE 39
	GOTO	LIMPA_O_DISPLAY			; OPCODE 40
	GOTO	LINHA_DISPLAY_SUPERIOR		; OPCODE 41
	GOTO	LINHA_DISPLAY_INFERIOR		; OPCODE 42
	GOTO	IF_COMPARATOR			; OPCODE 43
	GOTO	LIGAR_TODOS_RELES		; OPCODE 44
	GOTO	DESLIGAR_TODOS_RELES		; OPCODE 45
	GOTO	IFOUT1THEN			; OPCODE 46
	GOTO	IFOUT2THEN			; OPCODE 47
	GOTO	IFOUT3THEN			; OPCODE 48
	GOTO	IFOUT4THEN			; OPCODE 49
	GOTO	IFOUT5THEN			; OPCODE 50
	GOTO	IFOUT6THEN			; OPCODE 51
	GOTO	MOSTRA_STOPWATCH_HI		; OPCODE 52
	GOTO	MOSTRA_STOPWATCH_LO		; OPCODE 53
	GOTO	CALLPHONE			; OPCODE 54
	;GOTO	ESPELHA_IN_OUT			; OPCODE 55
	GOTO	INC_PONTEIRO			; OPCODE 55
	;GOTO	DECREMENTA_SAIDA		; OPCODE 56
	GOTO	INC_PONTEIRO			; OPCODE 56
	;GOTO	CARREGA_SAIDA			; OPCODE 57
	GOTO	INC_PONTEIRO			; OPCODE 57
	;GOTO	INCREMENTA_SAIDA		; OPCODE 58
	GOTO	INC_PONTEIRO			; OPCODE 58
	GOTO	IF_NOT_COMPARATOR		; OPCODE 59
	GOTO	WHILESW1			; OPCODE 60
	GOTO	WHILESW2			; OPCODE 61
	GOTO	WHILESW3			; OPCODE 62
	GOTO	WHILESW4			; OPCODE 63
	GOTO	WHILESW5			; OPCODE 64
	GOTO	WHILESW6			; OPCODE 65
	GOTO	CARREGA_PONTEIRO		; OPCODE 66
	GOTO	IF_COUNTER1			; OPCODE 67
	GOTO	WHILENOTSW1			; OPCODE 68
	GOTO	WHILENOTSW2			; OPCODE 69
	GOTO	WHILENOTSW3			; OPCODE 70
	GOTO	WHILENOTSW4			; OPCODE 71
	GOTO	WHILENOTSW5			; OPCODE 72
	GOTO	WHILENOTSW6			; OPCODE 73
	GOTO	INPUT6_AS_INPUT			; OPCODE 74
	GOTO	DISP1_TIME			; OPCODE 75
	GOTO	DOWHILE				; OPCODE 76
	GOTO	WHILESW1_DO			; OPCODE 77
	GOTO	WHILESW2_DO			; OPCODE 78
	GOTO	WHILESW3_DO			; OPCODE 79
	GOTO	WHILESW4_DO			; OPCODE 80
	GOTO	WHILESW5_DO			; OPCODE 81
	GOTO	WHILESW6_DO			; OPCODE 82
	GOTO	DISP1_FREQ			; OPCODE 83
	GOTO	DISP2_FREQ			; OPCODE 84
	GOTO	WHILENOTSW1_DO			; OPCODE 85
	GOTO	WHILENOTSW2_DO			; OPCODE 86
	GOTO	WHILENOTSW3_DO			; OPCODE 87
	GOTO	WHILENOTSW4_DO			; OPCODE 88
	GOTO	WHILENOTSW5_DO			; OPCODE 89
	GOTO	WHILENOTSW6_DO			; OPCODE 90
	GOTO	TXDATA_FREQ			; OPCODE 91
	GOTO	INPUT6_AS_FREQ			; OPCODE 92
	GOTO	REPEAT				; OPCODE 93
	GOTO	EXIT_REPEAT			; OPCODE 94
	GOTO	RESTORE				; OPCODE 95
	GOTO	TRATA_SWITCH1_1			; OPCODE 96
	GOTO	TRATA_SWITCH2_1			; OPCODE 97
	GOTO	TRATA_SWITCH3_1			; OPCODE 98
	GOTO	TRATA_SWITCH4_1			; OPCODE 99
	GOTO	TRATA_SWITCH5_1			; OPCODE 100
	GOTO	TRATA_SWITCH6_1			; OPCODE 101
	GOTO	DISP2_TIME			; OPCODE 102
	GOTO	TXDATA_TIME			; OPCODE 103
	GOTO	TRATA_SWITCH1_0			; OPCODE 104
	GOTO	TRATA_SWITCH2_0			; OPCODE 105
	GOTO	TRATA_SWITCH3_0			; OPCODE 106
	GOTO	TRATA_SWITCH4_0			; OPCODE 107
	GOTO	TRATA_SWITCH5_0			; OPCODE 108
	GOTO	TRATA_SWITCH6_0			; OPCODE 109
	GOTO	BEGIN_STOPWATCH			; OPCODE 110
	GOTO	STOP_STOPWATCH			; OPCODE 111
	GOTO	TRATA_OR_TRUE			; OPCODE 112
	GOTO	TRANSMITE_DADOS			; OPCODE 113
	GOTO	ROTATE_MESSAGE_TOLEFT		; OPCODE 114
	GOTO	ROTATE_MESSAGE_TORIGHT		; OPCODE 115
	GOTO	LIGA_LED1			; OPCODE 116
	GOTO	DESLIGA_LED1			; OPCODE 117
	GOTO	LIGA_LED2			; OPCODE 118
	GOTO	DESLIGA_LED2			; OPCODE 119
	GOTO	OSCILA_LED1			; OPCODE 120
	GOTO	OSCILA_LED2			; OPCODE 121
	GOTO	RESETA_MAQUINA			; OPCODE 122
	GOTO	PARA_MAQUINA			; OPCODE 123
	GOTO	OSCILACAO_RELE1			; OPCODE 124
	GOTO	OSCILACAO_RELE2			; OPCODE 125
	GOTO	OSCILACAO_RELE3			; OPCODE 126
	GOTO	OSCILACAO_RELE4			; OPCODE 127
	GOTO	OSCILACAO_RELE5			; OPCODE 128
	GOTO	OSCILACAO_RELE6			; OPCODE 129
	GOTO	SAIDA_DE_TENSAO			; OPCODE 130
	GOTO	TESTA_AD_MAIOR			; OPCODE 131
	GOTO	TESTA_AD_MENOR			; OPCODE 132
	GOTO	TESTA_AD_MAIOR_IGUAL		; OPCODE 133
	GOTO	TESTA_AD_MENOR_IGUAL		; OPCODE 134
	GOTO	TXDATA_STOPWATCH		; OPCODE 135
	GOTO	TESTA_AD_IGUAL			; OPCODE 136
	GOTO	DISP1_DEC			; OPCODE 137
	GOTO	DISP2_DEC			; OPCODE 138
	GOTO	DISP1_VOLTS			; OPCODE 139
	GOTO	DISP2_VOLTS			; OPCODE 140
	GOTO	TXDATA_VOLTS			; OPCODE 141
	GOTO	TXDATA_DECIMAL			; OPCODE 142
	GOTO	TESTE_DE_TEMPO			; OPCODE 143
	GOTO	COMPARACAO_DE_JANELA		; OPCODE 144
	GOTO	MUDA_BASE_VOLTAGE		; OPCODE 145
	GOTO	TOGGLE_RELE1			; OPCODE 146
	GOTO	TOGGLE_RELE2			; OPCODE 147
	GOTO	TOGGLE_RELE3			; OPCODE 148
	GOTO	TOGGLE_RELE4			; OPCODE 149
	GOTO	TOGGLE_RELE5			; OPCODE 150
	GOTO	TOGGLE_RELE6			; OPCODE 151
	GOTO	SETA_FLAG4_LPA			; OPCODE 152
	GOTO	CLEAR_FLAG1_LPA			; OPCODE 153
	GOTO	CLEAR_FLAG2_LPA			; OPCODE 154
	GOTO	TRATA_OR_FALSE			; OPCODE 155
	GOTO	TRATA_AND_FALSE			; OPCODE 156
	GOTO	TRATA_AND_TRUE			; OPCODE 157
	GOTO	CLEAR_FLAG3_LPA			; OPCODE 158
	GOTO	CLEAR_FLAG4_LPA			; OPCODE 159
	GOTO	IFFLAG1THEN			; OPCODE 160
	GOTO	IFFLAG2THEN			; OPCODE 161
	GOTO	IFFLAG3THEN			; OPCODE 162
	GOTO	IFFLAG4THEN			; OPCODE 163
	GOTO	IFNOTFLAG1THEN			; OPCODE 164
	GOTO	IFNOTFLAG2THEN			; OPCODE 165
	GOTO	IFNOTFLAG3THEN			; OPCODE 166
	GOTO	IFNOTFLAG4THEN			; OPCODE 167
	GOTO	SETA_FLAG5_LPA			; OPCODE 168
	GOTO	SETA_FLAG6_LPA			; OPCODE 169
	GOTO	SETA_FLAG7_LPA			; OPCODE 170
	GOTO	SETA_FLAG8_LPA			; OPCODE 171
	GOTO	CLEAR_FLAG5_LPA			; OPCODE 172
	GOTO	CLEAR_FLAG6_LPA			; OPCODE 173
	GOTO	CLEAR_FLAG7_LPA			; OPCODE 174
	GOTO	CLEAR_FLAG8_LPA			; OPCODE 175
	GOTO	IFFLAG5THEN			; OPCODE 176
	GOTO	IFFLAG6THEN			; OPCODE 177
	GOTO	IFFLAG7THEN			; OPCODE 178
	GOTO	IFFLAG8THEN			; OPCODE 179
	GOTO	IFNOTFLAG5THEN			; OPCODE 180
	GOTO	IFNOTFLAG6THEN			; OPCODE 181
	GOTO	IFNOTFLAG7THEN			; OPCODE 182
	GOTO	IFNOTFLAG8THEN			; OPCODE 183
	CALL	LE_I2C				; OPCODE 184
	PAGE1					; OPCODE 184
	GOTO	DECODIFICA_INSTRUCAO_II		; OPCODE 184
	
	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  				    EXECUÇÃO DE MICROINSTRUÇÕES						*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  	            ESTA ROTINA ATRIBUI A A% O VALOR DA LEITURA DO AD				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

ATRIBUI_A_AD_READ
		
	CALL	LEITURA_AD
	BANK1
	MOVWF	A_LO_LPA			; CARREGA EM A%, O VALOR DA LEITURA DE AD
	CLRF	A_HI_LPA			; LIMPA A PARTE SUPERIOR, POIS ESTA NÃO É UTILIZADA
	BANK0
	GOTO	INC_PONTEIRO
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  	         TESTE DE FLAG LPA					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

IFFLAG1THEN

	BTFSC	FLAG1_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF
	
IFFLAG2THEN

	BTFSC	FLAG2_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF
	
IFFLAG3THEN

	BTFSC	FLAG3_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF

IFFLAG4THEN

	BTFSC	FLAG4_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF

IFFLAG5THEN

	BTFSC	FLAG5_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF
	
IFFLAG6THEN

	BTFSC	FLAG6_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF
	
IFFLAG7THEN

	BTFSC	FLAG7_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF

IFFLAG8THEN

	BTFSC	FLAG8_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF


IFNOTFLAG1THEN

	BTFSS	FLAG1_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF
	
IFNOTFLAG2THEN

	BTFSS	FLAG2_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF
	
IFNOTFLAG3THEN

	BTFSS	FLAG3_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF

IFNOTFLAG4THEN

	BTFSS	FLAG4_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF


IFNOTFLAG5THEN

	BTFSS	FLAG5_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF
	
IFNOTFLAG6THEN

	BTFSS	FLAG6_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF
	
IFNOTFLAG7THEN

	BTFSS	FLAG7_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF

IFNOTFLAG8THEN

	BTFSS	FLAG8_LPA
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF

SETA_FLAG1_LPA

	BSF	FLAG1_LPA
	GOTO	INC_PONTEIRO
	
SETA_FLAG2_LPA

	BSF	FLAG2_LPA
	GOTO	INC_PONTEIRO

SETA_FLAG3_LPA

	BSF	FLAG3_LPA
	GOTO	INC_PONTEIRO

SETA_FLAG4_LPA

	BSF	FLAG4_LPA
	GOTO	INC_PONTEIRO

SETA_FLAG5_LPA

	BSF	FLAG5_LPA
	GOTO	INC_PONTEIRO
	
SETA_FLAG6_LPA

	BSF	FLAG6_LPA
	GOTO	INC_PONTEIRO

SETA_FLAG7_LPA

	BSF	FLAG7_LPA
	GOTO	INC_PONTEIRO

SETA_FLAG8_LPA

	BSF	FLAG8_LPA
	GOTO	INC_PONTEIRO


CLEAR_FLAG1_LPA

	BCF	FLAG1_LPA
	GOTO	INC_PONTEIRO
	
CLEAR_FLAG2_LPA

	BCF	FLAG2_LPA
	GOTO	INC_PONTEIRO

CLEAR_FLAG3_LPA

	BCF	FLAG3_LPA
	GOTO	INC_PONTEIRO

CLEAR_FLAG4_LPA

	BCF	FLAG4_LPA
	GOTO	INC_PONTEIRO

CLEAR_FLAG5_LPA

	BCF	FLAG5_LPA
	GOTO	INC_PONTEIRO
	
CLEAR_FLAG6_LPA

	BCF	FLAG6_LPA
	GOTO	INC_PONTEIRO

CLEAR_FLAG7_LPA

	BCF	FLAG7_LPA
	GOTO	INC_PONTEIRO

CLEAR_FLAG8_LPA

	BCF	FLAG8_LPA
	GOTO	INC_PONTEIRO


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  	    TESTE DO COMPARADOR					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

IF_COMPARATOR
	
	BTFSC	COMP
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO

IF_NOT_COMPARATOR

	BTFSS	COMP
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  	    MUDA O ESTADO DA SAÍDA					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TOGGLE_RELE1

	CALL	OSCILA_RELE1
	GOTO	INC_PONTEIRO
	
TOGGLE_RELE2

	CALL	OSCILA_RELE2
	GOTO	INC_PONTEIRO
	
TOGGLE_RELE3

	CALL	OSCILA_RELE3
	GOTO	INC_PONTEIRO
	
TOGGLE_RELE4

	CALL	OSCILA_RELE4

	GOTO	INC_PONTEIRO
	
TOGGLE_RELE5

	CALL	OSCILA_RELE5
	GOTO	INC_PONTEIRO
	
TOGGLE_RELE6

	CALL	OSCILA_RELE6
	GOTO	INC_PONTEIRO
	


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  	  MUDANÇA DE BASE DE VOLTAGEM					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

MUDA_BASE_VOLTAGE
	
	CALL	LE_I2C
	MOVWF	BASE_VOLTAGE
	GOTO	INC_PONTEIRO

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  FUNÇÃO ALARME					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TESTE_DE_TEMPO
	
	CALL	LE_I2C
	XORWF	HORA,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF
	
	CALL	LE_I2C
	XORWF	MINUTO,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO
	

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		   LEITURA DE AD					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*


LEITURA_AD

	CLRF	CCPR1L
	MOVLW	.22
	CALL	DELAY_MS
	
LEITURA_AD_A

	BTFSC	PORTA,5
	GOTO	SAI_AD
	
	MOVLW	.22
	CALL	DELAY_MS
	
	INCFSZ	CCPR1L,F
	GOTO 	LEITURA_AD_A
	MOVLW	.255
	MOVWF	VALOR_AD
	RETURN
	
SAI_AD
	
	MOVF	CCPR1L,W
	MOVWF	VALOR_AD
	CLRF	CCPR1L
	RETURN

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*  		                    ROTINAS DE ENTRADA AD					*		
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

COMPARACAO_DE_JANELA

	CALL 	LEITURA_AD
	CALL	LE_I2C
	SUBWF	VALOR_AD,W
	BTFSS	STATUS,C
	GOTO	SAI_DO_IF
	
	CALL	LEITURA_AD
	CALL	LE_I2C
	SUBWF	VALOR_AD,W
	BTFSC	STATUS,C
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO


TESTA_AD_MAIOR
	
	BCF	F_IGUAL
	
TESTA_AD_MAIOR_A

	CALL 	LEITURA_AD
	CALL	LE_I2C
	SUBWF	VALOR_AD,W
	BTFSS	F_IGUAL
	GOTO	$+3
	BTFSC	STATUS,Z
	GOTO	INC_PONTEIRO
	BTFSS	STATUS,C
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO


TESTA_AD_MENOR

	BCF	F_IGUAL
	
TESTA_AD_MENOR_A

	CALL 	LEITURA_AD
	CALL	LE_I2C
	SUBWF	VALOR_AD,W
	BTFSS	F_IGUAL
	GOTO	$+3
	BTFSC	STATUS,Z
	GOTO	INC_PONTEIRO
	BTFSC	STATUS,C
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO

TESTA_AD_MAIOR_IGUAL

	BSF	F_IGUAL
	GOTO	TESTA_AD_MAIOR_A


TESTA_AD_MENOR_IGUAL
	
	BSF	F_IGUAL
	GOTO	TESTA_AD_MENOR_A

TESTA_AD_IGUAL

	CALL 	LEITURA_AD
	CALL	LE_I2C
	XORWF	VALOR_AD,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO
		
DISP1_DEC
	
	MOVLW	LINHA_SUP+.7

DISP1_DEC_A
	
	CALL	LCD_COMANDO

DISP1_DEC_B
	
	CALL	LEITURA_AD
	MOVF	VALOR_AD,W
	MOVWF	LSB
	CLRF	MSB
	CALL	BIN_TO_DEC
	
	MOVF	CONVERSAO_2,W
	
	CALL	VAI_DISP_SER
		
	MOVF	CONVERSAO_1,W
	
	CALL	VAI_DISP_SER
		
	MOVF	CONVERSAO_0,W
	
	CALL	VAI_DISP_SER
		
	BCF	F_DISPOUSERIAL	
	GOTO	INC_PONTEIRO
	
DISP2_DEC
	
	MOVLW	LINHA_INF+.7
	GOTO	DISP1_DEC_A


DISP1_VOLTS
	
	MOVLW	LINHA_SUP+5
	
DISP1_VOLTS_A
	
	CALL	LCD_COMANDO

DISP1_VOLTS_B
	
	CALL	LEITURA_AD
	MOVF	VALOR_AD,W
	MOVWF	MULTIPLICADOR_DIVIDENDO
	;MOVLW	.19
	MOVF	BASE_VOLTAGE,W
	MOVWF	MULTIPLICANDO_DIVISOR
	CALL	MULTIPLY
	MOVF	RESULTADO_LO,W
	MOVWF	LSB
	MOVF	RESULTADO_HI,W
	MOVWF	MSB
	CALL	BIN_TO_DEC
	
	MOVF	CONVERSAO_4,W
	BTFSC	STATUS,Z
	GOTO	NAO_MOSTRA4
	
	;ADDLW	.48
	;BTFSS	F_DISPOUSERIAL
	;CALL	ENVIA_DISP
	;BTFSC	F_DISPOUSERIAL
	;CALL	TXDATA_TO_PC	
	CALL	VAI_DISP_SER
	
NAO_MOSTRA4
	
	MOVF	CONVERSAO_3,W
	
	;ADDLW	.48
	;BTFSS	F_DISPOUSERIAL
	;CALL	ENVIA_DISP
	;BTFSC	F_DISPOUSERIAL
	;CALL	TXDATA_TO_PC	
	CALL	VAI_DISP_SER
		
	MOVLW	','
	
	;BTFSS	F_DISPOUSERIAL
	;CALL	ENVIA_DISP
	;BTFSC	F_DISPOUSERIAL
	;CALL	TXDATA_TO_PC	
	CALL	VAI_DISP_SER_A	
	
	MOVF	CONVERSAO_2,W
	
	;ADDLW	.48
	;BTFSS	F_DISPOUSERIAL
	;CALL	ENVIA_DISP
	;BTFSC	F_DISPOUSERIAL
	;CALL	TXDATA_TO_PC	
	CALL	VAI_DISP_SER
		
	MOVF	CONVERSAO_1,W
	
	;ADDLW	.48
	;BTFSS	F_DISPOUSERIAL
	;CALL	ENVIA_DISP
	;BTFSC	F_DISPOUSERIAL
	;CALL	TXDATA_TO_PC	
	CALL	VAI_DISP_SER
	
	MOVF	CONVERSAO_0,W
	
	;ADDLW	.48
	;BTFSS	F_DISPOUSERIAL
	;CALL	ENVIA_DISP
	;BTFSC	F_DISPOUSERIAL
	;CALL	TXDATA_TO_PC	
	CALL	VAI_DISP_SER
	
	MOVLW	' '
	
	;BTFSS	F_DISPOUSERIAL
	;CALL	ENVIA_DISP
	;BTFSC	F_DISPOUSERIAL
	;CALL	TXDATA_TO_PC	
	CALL	VAI_DISP_SER_A
		
	MOVLW	'V'
	
	;BTFSS	F_DISPOUSERIAL
	;CALL	ENVIA_DISP
	;BTFSC	F_DISPOUSERIAL
	;CALL	TXDATA_TO_PC	
	CALL	VAI_DISP_SER_A
	
	MOVLW	' '
	CALL	ENVIA_DISP
		
	BCF	F_DISPOUSERIAL
	GOTO	INC_PONTEIRO

VAI_DISP_SER

	ADDLW	.48

VAI_DISP_SER_A
	
	BTFSS	F_DISPOUSERIAL
	GOTO	ENVIA_DISP
	BTFSC	F_DISPOUSERIAL
	GOTO	TXDATA_TO_PC	

DISP2_VOLTS
	
	MOVLW	LINHA_INF+5
	GOTO	DISP1_VOLTS_A

TXDATA_VOLTS

	BSF	F_DISPOUSERIAL
	GOTO	DISP1_VOLTS_B
	
TXDATA_DECIMAL

	BSF	F_DISPOUSERIAL
	GOTO	DISP1_DEC_B
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	                    ROTINA DE MULTIPLICAÇÃO DE 16 BITS					*		
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

MULTIPLY

	CLRF	RESULTADO_LO
	CLRF	RESULTADO_HI
	
	
	MOVF	MULTIPLICANDO_DIVISOR,F 
	BTFSC	STATUS,Z
	RETURN
	
	MOVF	MULTIPLICADOR_DIVIDENDO,F 
	BTFSS	STATUS,Z
	GOTO	MULTIPLY_A	
	
	MOVF	MULTIPLICANDO_2,F
	BTFSC	STATUS,Z	
	RETURN
	
MULTIPLY_A
	
	MOVF	MULTIPLICADOR_DIVIDENDO,W 
	ADDWF	RESULTADO_LO,F
	BTFSC	STATUS,C
	INCF	RESULTADO_HI,F
	
	MOVF	MULTIPLICANDO_2,W
	ADDWF	RESULTADO_HI,F
		
	DECFSZ	MULTIPLICANDO_DIVISOR,F
	GOTO	MULTIPLY_A
	RETURN

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*  		                    ROTINA DE SAÍDA DE TENSÃO					*		
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

SAIDA_DE_TENSAO

	CALL	LE_I2C
	MOVWF	CCPR1L
	GOTO	INC_PONTEIRO

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*  		                        RESETA MAQUINA						*		
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

RESETA_MAQUINA

	BSF	RESET
	GOTO	INC_PONTEIRO

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*  		                        PARAR A MAQUINA						*		
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

PARA_MAQUINA	

	BCF	TEM_PROG
	GOTO	INC_PONTEIRO
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*  		                 COMANDO PARA CHAMADA DE TELEFONE				*	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

CALLPHONE

	CALL	LE_I2C
	MOVWF	TEMP
	
CALLPHONE_A

	CALL	LE_I2C

CALLPHONE_B

	MOVWF	TEMP_1

CALLPHONE_C
	
	BSF	RELE6
	CALL	OUT_DADOS_B	
	MOVLW	.66
	CALL	DELAY_MS
	
	BCF	RELE6
	CALL	OUT_DADOS_B
	MOVLW	.34
	CALL	DELAY_MS
	
	DECFSZ	TEMP_1,F
	GOTO	CALLPHONE_C

	MOVLW	.1
	CALL	DELAY_SEG
	
	DECFSZ	TEMP,F
	GOTO	CALLPHONE_A
	GOTO	INC_PONTEIRO

		
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*      		                 AJUSTES DA HORA					*	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DISP1_DATE
	MOVLW	LINHA_SUP+.4
DISP1_DATE_A
	CALL	LCD_COMANDO
	BCF	F_DISPOUSERIAL

DISP1_DATE_B
		
	MOVF	DIA,W
	CALL	ATU_DISP
	
	BTFSC	F_DISPOUSERIAL
	GOTO	$+3
	MOVLW	'/'
	CALL	ENVIA_DISP
	
	MOVF	MES,W
	CALL	ATU_DISP
	
	BTFSC	F_DISPOUSERIAL
	GOTO	$+3
	MOVLW	'/'
	CALL	ENVIA_DISP
	
	MOVF	ANO,W
	CALL	ATU_DISP
	
	BCF	F_DISPOUSERIAL
	GOTO	INC_PONTEIRO

DISP2_DATE
	MOVLW	LINHA_INF+.4
	GOTO	DISP1_DATE_A
	

TXDATA_DATE
	
	BSF	F_DISPOUSERIAL
	GOTO	DISP1_DATE_B

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*      		                 AJUSTES DO PWM						*	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

INC_PWM
	
	MOVLW	.1
	ADDWF	CCPR1L,W
	BTFSC	STATUS,C
	GOTO	INC_PONTEIRO
	MOVWF	CCPR1L
	GOTO	INC_PONTEIRO
	

DEC_PWM

	MOVLW	.1
	SUBWF	CCPR1L,W
	BTFSS	STATUS,C
	GOTO	INC_PONTEIRO
	MOVWF	CCPR1L
	GOTO	INC_PONTEIRO
	

SET_PWM

	MOVLW	.255
	MOVWF	CCPR1L
	GOTO	INC_PONTEIRO
	
CLR_PWM

	CLRF	CCPR1L
	GOTO	INC_PONTEIRO
	
AJUSTA_PWM

	CALL	LE_I2C
	MOVWF	CCPR1L
	GOTO	INC_PONTEIRO	

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*      		           ROTINAS DE ACESSO A EPPROM					*	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

INC_ADDR_EEPROM

	BANK1
	INCF	EEADR,F

SAI_EEPROM
	BANK0
	GOTO	INC_PONTEIRO
	
DEC_ADDR_EEPROM

	BANK1
	DECF	EEADR,F
	GOTO	SAI_EEPROM
	
CARREGA_ADDR

	CALL	LE_I2C
	BANK1
	MOVWF	EEADR
	GOTO	SAI_EEPROM
	
ESCREVE_EEPROM
	
	BCF	INTCON,GIE
	CALL	LE_I2C
	BANK1
	MOVWF	EEDATA
	BSF	EECON1,WREN
	MOVLW	0x55
	MOVWF	EECON2
	MOVLW	0xAA
	MOVWF	EECON2
	BSF	EECON1,WR
	BTFSC	EECON1,WR
	GOTO	$-1
	BCF	EECON1,WREN
	BANK0
	BSF	INTCON,GIE
	GOTO	INC_PONTEIRO


LEITURA_EEPROM

	BANK1
	BSF	EECON1,RD
	MOVF	EEDATA,W
	BANK0
	RETURN

LE_EEPROM
	CALL	LEITURA_EEPROM	
	MOVWF	TEMP
	CALL	LE_I2C
	XORWF	TEMP,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO
		
TXDATA_EEPROM

	CALL	LEITURA_EEPROM
	CALL	TXDATA_TO_PC

TRANSMITE_FIM

	MOVLW	LF
	CALL	TXDATA_TO_PC
	MOVLW	CR
	CALL	TXDATA_TO_PC
	GOTO	INC_PONTEIRO

	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*      		                 ROTINAS GERAIS						*	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

LE_I2C

	CALL	INC_PONTEIRO
	CALL	I2C_READ
	MOVF	BUFFER,W
	RETURN
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*      		                 TRATAMENTO DO OR					*	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TRATA_OR_FALSE
	
	BSF	F_NEGACAO
	GOTO	TRATA_OR_TRUE_IN

TRATA_OR_TRUE
	
	BCF	F_NEGACAO
	
TRATA_OR_TRUE_IN

	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	MOVWF	TEMP
	BCF	OR_TRUE
	
TRATA_OR_TRUE_A

	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	CALL	TESTA_PINO
	
	BTFSC	STATUS,C
	BSF	OR_TRUE
	
	DECFSZ	TEMP,F
	GOTO	TRATA_OR_TRUE_A
	
	BTFSS	F_NEGACAO
	GOTO	VE_TRUE_OR
	
	BTFSS	OR_TRUE
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF

VE_TRUE_OR
	
	BTFSC	OR_TRUE
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF
	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*      		                 TRATAMENTO DO AND					*	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TRATA_AND_FALSE

	BSF	F_NEGACAO
	GOTO	TRATA_AND_TRUE_IN
	
TRATA_AND_TRUE
	
	BCF	F_NEGACAO

TRATA_AND_TRUE_IN	
	
	CALL	LE_I2C
	MOVWF	TEMP
	BCF	OR_TRUE
	
TRATA_AND_TRUE_A
	
	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	CALL	TESTA_PINO
	
	BTFSS	STATUS,C
	BSF	OR_TRUE
	
	DECFSZ	TEMP,F
	GOTO	TRATA_AND_TRUE_A
	
	BTFSS	F_NEGACAO
	GOTO	VE_TRUE
	
	BTFSC	OR_TRUE
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF
	
VE_TRUE

	BTFSS	OR_TRUE
	GOTO	INC_PONTEIRO
	GOTO	SAI_DO_IF
	
TESTA_PINO

	MOVWF	TEMP_1
	MOVLW   HIGH SALTO_PINO
	MOVWF	PCLATH
	
	MOVF	TEMP_1,W
	ADDLW	LOW  SALTO_PINO
	BTFSC	STATUS,C
	INCF	PCLATH,F
	MOVWF	PCL
	
SALTO_PINO

	GOTO 	TESTA_BOTAO1_TRUE
	GOTO	TESTA_BOTAO2_TRUE
	GOTO	TESTA_BOTAO3_TRUE
	GOTO	TESTA_BOTAO4_TRUE
	GOTO	TESTA_BOTAO5_TRUE
	GOTO	TESTA_BOTAO6_TRUE
	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*      		                 COMANDOS DE LED					*	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

LIGA_LED1

	BSF	LED1
	GOTO	OUT_DADOS

DESLIGA_LED1
	
	BCF	LED1
	BCF	PISCA_LED1
	GOTO	OUT_DADOS
	
LIGA_LED2

	BSF	LED2
	GOTO	OUT_DADOS
	
DESLIGA_LED2

	BCF	LED2
	BCF	PISCA_LED2
	GOTO	OUT_DADOS
	
OSCILA_LED1

	BSF	PISCA_LED1
	GOTO	INC_PONTEIRO

OSCILA_LED2

	BSF	PISCA_LED2
	GOTO	INC_PONTEIRO
	

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*      		                 ROTINAS DE RTC						*	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DISP1_TIME	

	BSF	TIME_OU_STOP
	MOVLW	LINHA_SUP+.4
	GOTO	MOSTRA_STOPWATCH_C

DISP2_TIME

	BSF	TIME_OU_STOP
	MOVLW	LINHA_INF+.4
	GOTO	MOSTRA_STOPWATCH_C
	

TXDATA_TIME
	
	BSF	TIME_OU_STOP
	BSF	F_DISPOUSERIAL
	GOTO	MOSTRA_STOPWATCH_B
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*      		            ROTINAS DE FREQUENCIMETRO					*	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DISP1_FREQ
	MOVLW	LINHA_SUP+.5

DISP1_FREQ_A
	CALL	LCD_COMANDO
	
	MOVF	CONVERSAO_4,W
	CALL	TX_FREQ_DISP
	
	MOVF	CONVERSAO_3,W
	CALL	TX_FREQ_DISP
	
	MOVF	CONVERSAO_2,W
	CALL	TX_FREQ_DISP
	
	MOVF	CONVERSAO_1,W
	CALL	TX_FREQ_DISP
	
	MOVF	CONVERSAO_0,W
	CALL	TX_FREQ_DISP
	
	GOTO	INC_PONTEIRO

TX_FREQ_DISP

	ADDLW	.48
	GOTO	ENVIA_DISP	
	
DISP2_FREQ
	MOVLW	LINHA_INF+.5
	GOTO	DISP1_FREQ_A

TXDATA_FREQ
	MOVF	CONVERSAO_4,W
	CALL	TX_FREQ
	
	MOVF	CONVERSAO_3,W
	CALL	TX_FREQ
	
	MOVF	CONVERSAO_2,W
	CALL	TX_FREQ
	
	MOVF	CONVERSAO_1,W
	CALL	TX_FREQ
	
	MOVF	CONVERSAO_0,W
	CALL	TX_FREQ
	
	GOTO	INC_PONTEIRO

TX_FREQ
	ADDLW	.48
	GOTO	TXDATA_TO_PC
		
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	       		               ROTINAS DE CONTADOR					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

INPUT6_AS_INPUT
	
	BCF	INTCON,T0IE
	BCF	FREQ
	BCF	MODO_COUNTER
	BCF	MODO_RPM
	GOTO	INC_PONTEIRO

INPUT6_AS_FREQ
	
	BSF	FREQ
	CLRF	COUNTER1_LO
	CLRF	COUNTER1_HI
	
INPUT6_AS_COUNTER

	MOVLW	.255
	MOVWF	TMR0
	
	BCF	INTCON,T0IF
	BSF	INTCON,T0IE
	GOTO	INC_PONTEIRO
	
LOAD_COUNTER6

	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	MOVWF	COUNTER1_LO
	MOVWF	ESP_COUNTER1_LO
	
	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	ADDLW	.1
	MOVWF	COUNTER1_HI
	MOVWF	ESP_COUNTER1_HI
		
	GOTO	INC_PONTEIRO
	
IF_COUNTER1
	
	BTFSS	ESTOURO_COUNTER1
	GOTO	SAI_DO_IF
	BCF	ESTOURO_COUNTER1
	GOTO	INC_PONTEIRO
	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	       		            COMANDOS DO CRONÔMETRO					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TXDATA_STOPWATCH
	
	BSF	F_DISPOUSERIAL
	GOTO	MOSTRA_STOPWATCH_B
	
BEGIN_STOPWATCH

	BSF	F_STOPWATCH
	GOTO	INC_PONTEIRO

STOP_STOPWATCH

	BCF	F_STOPWATCH
	GOTO	INC_PONTEIRO

CLEAR_STOPWATCH
	CLRF	STOPWATCH_SEGUNDO
	CLRF	STOPWATCH_MINUTO
	CLRF	STOPWATCH_HORA
	GOTO	INC_PONTEIRO
	
	
MOSTRA_STOPWATCH_HI	

	MOVLW	LINHA_SUP+.4

MOSTRA_STOPWATCH_A
	BCF	TIME_OU_STOP

MOSTRA_STOPWATCH_C
	
	BCF	F_DISPOUSERIAL
	CALL	LCD_COMANDO

MOSTRA_STOPWATCH_B
	
	MOVF	STOPWATCH_HORA,W
	BTFSC	TIME_OU_STOP
	MOVF	HORA,W
	CALL	ATU_DISP
	
	BTFSC	F_DISPOUSERIAL
	GOTO	$+3		
	MOVLW	":"
	CALL	ENVIA_DISP
	
	MOVF	STOPWATCH_MINUTO,W
	BTFSC	TIME_OU_STOP
	MOVF	MINUTO,W
	CALL	ATU_DISP
	
	BTFSC	F_DISPOUSERIAL
	GOTO	$+3		
	MOVLW	":"
	CALL	ENVIA_DISP
	
	MOVF	STOPWATCH_SEGUNDO,W
	BTFSC	TIME_OU_STOP
	MOVF	SEGUNDO,W
	CALL	ATU_DISP
	BCF	F_DISPOUSERIAL
	GOTO	INC_PONTEIRO
	

ATU_DISP
	
	MOVWF	LSB
	CALL	BIN_TO_DEC
	MOVF	CONVERSAO_1,W
	
	;ADDLW	.48
	;BTFSS	F_DISPOUSERIAL
	;CALL	ENVIA_DISP
	;BTFSC	F_DISPOUSERIAL
	;CALL	TXDATA_TO_PC
	CALL	VAI_DISP_SER
	
	MOVF	CONVERSAO_0,W
	
	;ADDLW	.48
	;BTFSS	F_DISPOUSERIAL
	;GOTO	ENVIA_DISP
	;BTFSC	F_DISPOUSERIAL
	;GOTO	TXDATA_TO_PC
	GOTO	VAI_DISP_SER

MOSTRA_STOPWATCH_LO

	MOVLW	LINHA_INF+.4
	GOTO	MOSTRA_STOPWATCH_A

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	       		         CARGA DE NOVO VALOR DE PONTEIRO				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

CARREGA_PONTEIRO

	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	MOVWF	TEMP
	
	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	MOVWF	ENDERECO_HI
	
	MOVF	TEMP,W
	MOVWF	ENDERECO_LO
	
	GOTO	INC_PONTEIRO

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	       		     TRANSMISSÃO DE PROGRAMA PELO CANAL SERIAL					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TXPROG
	MOVF	ENDERECO_LO,W
	MOVWF	ENDERECO_LO_PROG
	MOVF	ENDERECO_HI,W
	MOVWF	ENDERECO_HI_PROG
	
	CALL	LIMPA_PONTEIRO
	CALL	INC_PONTEIRO
	
TX_PROG_A

	;CLRWDT
	CALL	I2C_READ
	MOVLW	FIM_PROG_USU
	XORWF	BUFFER,W
	BTFSC	STATUS,Z
	GOTO	TX_PROG_B
	MOVF	BUFFER,W
	CALL	TXDATA_TO_PC
	CALL	INC_PONTEIRO
	GOTO	TX_PROG_A

TX_PROG_B

	MOVF	ENDERECO_LO_PROG,W
	MOVWF	ENDERECO_LO
	MOVF	ENDERECO_HI_PROG,W
	MOVWF	ENDERECO_HI
	GOTO	INC_PONTEIRO

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	           		      TRATAMENTO DO DOWHILE					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DOWHILE
	CALL	INC_PONTEIRO
	
	MOVF	ENDERECO_LO,W
	MOVWF	ENDERECO_LO_DOWHILE
	
	MOVF	ENDERECO_HI,W
	MOVWF	ENDERECO_HI_DOWHILE
	
	RETURN
	
WHILENOTSW1_DO
	BSF	FUNCTION2_DO
	
WHILESW1_DO

	BTFSS	FUNCTION2_DO
	CALL	TESTA_BOTAO1_TRUE
	BTFSC	FUNCTION2_DO
	CALL	TESTA_BOTAO1_FALSE
	GOTO	CARREGA_ENDERECO_ANT

WHILENOTSW2_DO
	BSF	FUNCTION2_DO

WHILESW2_DO

	BTFSS	FUNCTION2_DO
	CALL	TESTA_BOTAO2_TRUE
	BTFSC	FUNCTION2_DO
	CALL	TESTA_BOTAO2_FALSE
	GOTO	CARREGA_ENDERECO_ANT

WHILENOTSW3_DO
	BSF	FUNCTION2_DO

WHILESW3_DO

	BTFSS	FUNCTION2_DO
	CALL	TESTA_BOTAO3_TRUE
	BTFSC	FUNCTION2_DO
	CALL	TESTA_BOTAO3_FALSE
	GOTO	CARREGA_ENDERECO_ANT

WHILENOTSW4_DO
	BSF	FUNCTION2_DO

WHILESW4_DO

	BTFSS	FUNCTION2_DO
	CALL	TESTA_BOTAO4_TRUE
	BTFSC	FUNCTION2_DO
	CALL	TESTA_BOTAO4_FALSE
	GOTO	CARREGA_ENDERECO_ANT

WHILENOTSW5_DO
	BSF	FUNCTION2_DO

WHILESW5_DO

	BTFSS	FUNCTION2_DO
	CALL	TESTA_BOTAO5_TRUE
	BTFSC	FUNCTION2_DO
	CALL	TESTA_BOTAO5_FALSE
	GOTO	CARREGA_ENDERECO_ANT

WHILENOTSW6_DO
	BSF	FUNCTION2_DO
	
WHILESW6_DO

	BTFSS	FUNCTION2_DO
	CALL	TESTA_BOTAO6_TRUE
	BTFSC	FUNCTION2_DO
	CALL	TESTA_BOTAO6_FALSE

CARREGA_ENDERECO_ANT
	
	BCF	FUNCTION2_DO
	BTFSS	STATUS,C
	GOTO	INC_PONTEIRO
		
	MOVF	ENDERECO_LO_DOWHILE,W
	MOVWF	ENDERECO_LO
	MOVF	ENDERECO_HI_DOWHILE,W
	MOVWF	ENDERECO_HI
	RETURN


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	           		     TRATAMENTO DO WHILE					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

WHILENOTSW1
	BSF	FUNCTION2
WHILESW1

	BTFSS	FUNCTION2
	CALL	TESTA_BOTAO1_TRUE
	BTFSC	FUNCTION2
	CALL	TESTA_BOTAO1_FALSE
		
	BTFSS	STATUS,C
	GOTO	SAI_DO_WHILE

	CALL	PROCESSA_WHILE
	GOTO	WHILESW1


WHILENOTSW2
	BSF	FUNCTION2
WHILESW2

	BTFSS	FUNCTION2
	CALL	TESTA_BOTAO2_TRUE
	BTFSC	FUNCTION2
	CALL	TESTA_BOTAO2_FALSE
		
	BTFSS	STATUS,C
	GOTO	SAI_DO_WHILE
	
	CALL	PROCESSA_WHILE
	GOTO	WHILESW2

WHILENOTSW3
	BSF	FUNCTION2
WHILESW3

	BTFSS	FUNCTION2
	CALL	TESTA_BOTAO3_TRUE
	BTFSC	FUNCTION2
	CALL	TESTA_BOTAO3_FALSE
			
	BTFSS	STATUS,C
	GOTO	SAI_DO_WHILE
	
	CALL	PROCESSA_WHILE
	GOTO	WHILESW3

WHILENOTSW4
	BSF	FUNCTION2

WHILESW4

	BTFSS	FUNCTION2
	CALL	TESTA_BOTAO4_TRUE
	BTFSC	FUNCTION2
	CALL	TESTA_BOTAO4_FALSE
		
	BTFSS	STATUS,C
	GOTO	SAI_DO_WHILE
	
	CALL	PROCESSA_WHILE
	GOTO	WHILESW4

WHILENOTSW5
	BSF	FUNCTION2
WHILESW5

	BTFSS	FUNCTION2
	CALL	TESTA_BOTAO5_TRUE
	BTFSC	FUNCTION2
	CALL	TESTA_BOTAO5_FALSE
		
	BTFSS	STATUS,C
	GOTO	SAI_DO_WHILE
	
	CALL	PROCESSA_WHILE
	GOTO	WHILESW5

WHILENOTSW6
	BSF	FUNCTION2
WHILESW6

	BTFSS	FUNCTION2
	CALL	TESTA_BOTAO6_TRUE
	BTFSC	FUNCTION2
	CALL	TESTA_BOTAO6_FALSE
	
	BTFSS	STATUS,C
	GOTO	SAI_DO_WHILE
	
	CALL	PROCESSA_WHILE
	GOTO	WHILESW6

PROCESSA_WHILE
	
	BTFSS	F_INC
	CALL	INC_PONTEIRO
	BSF	F_INC
	
	MOVF	ENDERECO_LO,W
	MOVWF	ENDERECO_LO_WHILE
	MOVF	ENDERECO_HI,W
	MOVWF	ENDERECO_HI_WHILE

	GOTO	LOOP_WHILE
	
RETORNO_LOOP_WHILE	
	
	MOVF	ENDERECO_LO_WHILE,W
	MOVWF	ENDERECO_LO
	MOVF	ENDERECO_HI_WHILE,W
	MOVWF	ENDERECO_HI
	RETURN
	
SAI_DO_WHILE
	BCF	FUNCTION2
	BCF	F_INC
	MOVLW	FIM_DO_WHILE
	BCF	OPERACAO
	GOTO	PROCURA_CARACTERE


LOOP_WHILE
	
	CALL	I2C_READ
	MOVLW	FIM_DO_WHILE
	XORWF	BUFFER,W
	BTFSC	STATUS,Z
	GOTO	RETORNO_LOOP_WHILE
	CALL	DECODIFICA_INSTRUCAO
	GOTO	LOOP_WHILE

	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	           		     TRATAMENTO DOS SWITCHS					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

IFOUT1THEN
	BTFSS	RELE1POS
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO

IFOUT2THEN
	BTFSS	RELE2POS
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO

IFOUT3THEN
	BTFSS	RELE3POS
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO

IFOUT4THEN
	BTFSS	RELE4POS
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO

IFOUT5THEN
	BTFSS	RELE5POS
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO

IFOUT6THEN
	BTFSS	RELE6
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO

;CARREGA_REGS
;	MOVLW	.255
;	MOVWF	TEMPO1
;	RETURN
	
TRATA_SWITCH1_0
	
	BTFSS	INPUT1
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO

TRATA_SWITCH2_0
	
	BTFSS	INPUT2
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO

TRATA_SWITCH3_0
	
	BTFSS	INPUT3
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO
	
TRATA_SWITCH4_0
	
	BTFSS	INPUT4
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO
		
TRATA_SWITCH5_0
	
	BTFSS	INPUT5
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO
	
TRATA_SWITCH6_0
	
	BTFSS	INPUT6
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO
	
TRATA_SWITCH1_1
	
	BTFSC	INPUT1
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO

TRATA_SWITCH2_1
	
	BTFSC	INPUT2
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO

TRATA_SWITCH3_1
	
	BTFSC	INPUT3
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO
	
TRATA_SWITCH4_1
	
	BTFSC	INPUT4
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO
		
TRATA_SWITCH5_1
	
	BTFSC	INPUT5
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO
	
TRATA_SWITCH6_1
	
	BTFSC	INPUT6
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO
	
;TESTA_CONDICAO
	
;	BTFSS	STATUS,C
;	GOTO	SAI_DO_IF
;	GOTO	INC_PONTEIRO
	
	
;DEBOUNCE_BOTOES
	
	;CLRWDT
;	BCF	STATUS,C
;	DECFSZ	TEMPO1,F
;	RETURN
;	BSF	STATUS,C
;	RETURN

SAI_DO_IF
	
	MOVLW	ELSE_IF
	BSF	OPERACAO
	CALL	PROCURA_CARACTERE
	CALL	LE_I2C
	XORLW	.255
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF
	GOTO	INC_PONTEIRO
	
SAI_DO_ELSE
	
	CALL	INC_PONTEIRO		;INCREMENTA O PONTEIRO
	GOTO 	SAI_DO_IF

TESTA_BOTAO1_TRUE
	
	;CALL	CARREGA_REGS

TESTA_BOTAO1_TRUE_A
	
	BSF	STATUS,C
	BTFSC	INPUT1
	BCF	STATUS,C
	RETURN

;	BCF	STATUS,C
;	BTFSC	OUTRO_ESTADO
;	GOTO	$+.4
;	BTFSC	INPUT1
;	RETURN
;	GOTO	$+.3
;	BTFSS	INPUT1
;	RETURN
;	CALL	DEBOUNCE_BOTOES
;	BTFSS	STATUS,C
;	GOTO	TESTA_BOTAO1_TRUE_A
;RETORNA_BOTAO	
;	BCF	OUTRO_ESTADO
;	RETURN
	

TESTA_BOTAO2_TRUE

	;CALL	CARREGA_REGS

TESTA_BOTAO2_TRUE_A
	
	BSF	STATUS,C
	BTFSC	INPUT2
	BCF	STATUS,C
	RETURN
	
;	BCF	STATUS,C
;	BTFSC	OUTRO_ESTADO
;	GOTO	$+.4
;	BTFSC	INPUT2
;	RETURN
;	GOTO	$+.3
;	BTFSS	INPUT2
;	RETURN
;	CALL	DEBOUNCE_BOTOES
;	BTFSS	STATUS,C
;	GOTO	TESTA_BOTAO2_TRUE_A
;	GOTO	RETORNA_BOTAO

TESTA_BOTAO3_TRUE

	;CALL	CARREGA_REGS

TESTA_BOTAO3_TRUE_A
	
	BSF	STATUS,C
	BTFSC	INPUT3
	BCF	STATUS,C
	RETURN
	
;	BCF	STATUS,C
;	BTFSC	OUTRO_ESTADO
;	GOTO	$+.4
;	BTFSC	INPUT3
;	RETURN
;	GOTO	$+.3
;	BTFSS	INPUT3
;	RETURN
;	CALL	DEBOUNCE_BOTOES
;	BTFSS	STATUS,C
;	GOTO	TESTA_BOTAO3_TRUE_A
;	GOTO	RETORNA_BOTAO
	
TESTA_BOTAO4_TRUE

	;CALL	CARREGA_REGS

TESTA_BOTAO4_TRUE_A
	
	BSF	STATUS,C
	BTFSC	INPUT4
	BCF	STATUS,C
	RETURN
	
;	BCF	STATUS,C
;	BTFSC	OUTRO_ESTADO
;	GOTO	$+.4
;	BTFSC	INPUT4
;	RETURN
;	GOTO	$+.3
;	BTFSS	INPUT4
;	RETURN
;	CALL	DEBOUNCE_BOTOES
;	BTFSS	STATUS,C
;	GOTO	TESTA_BOTAO4_TRUE_A
;	GOTO	RETORNA_BOTAO
	
TESTA_BOTAO5_TRUE

	;CALL	CARREGA_REGS

TESTA_BOTAO5_TRUE_A
	
	BSF	STATUS,C
	BTFSC	INPUT5
	BCF	STATUS,C
	RETURN
	
;	BCF	STATUS,C
;	BTFSC	OUTRO_ESTADO
;	GOTO	$+.4
;	BTFSC	INPUT5
;	RETURN
;	GOTO	$+.3
;	BTFSS	INPUT5
;	RETURN
;	CALL	DEBOUNCE_BOTOES
;	BTFSS	STATUS,C
;	GOTO	TESTA_BOTAO5_TRUE_A
;	GOTO	RETORNA_BOTAO

TESTA_BOTAO6_TRUE

	;CALL	CARREGA_REGS

TESTA_BOTAO6_TRUE_A
	
	BSF	STATUS,C
	BTFSC	INPUT6
	BCF	STATUS,C
	RETURN
	
;	BCF	STATUS,C
;	BTFSC	OUTRO_ESTADO
;	GOTO	$+.4
;	BTFSC	INPUT6
;	RETURN
;	GOTO	$+.3
;	BTFSS	INPUT6
;	RETURN
;	CALL	DEBOUNCE_BOTOES
;	BTFSS	STATUS,C
;	GOTO	TESTA_BOTAO6_TRUE_A
;	GOTO	RETORNA_BOTAO

TESTA_BOTAO1_FALSE

	BSF	STATUS,C
	BTFSS	INPUT1
	BCF	STATUS,C
	RETURN
	
	;BSF	OUTRO_ESTADO
	;GOTO	TESTA_BOTAO1_TRUE

TESTA_BOTAO2_FALSE

	BSF	STATUS,C
	BTFSS	INPUT2
	BCF	STATUS,C
	RETURN
	
	;BSF	OUTRO_ESTADO
	;GOTO	TESTA_BOTAO2_TRUE

TESTA_BOTAO3_FALSE
	
	BSF	STATUS,C
	BTFSS	INPUT3
	BCF	STATUS,C
	RETURN
	
	;BSF	OUTRO_ESTADO
	;GOTO	TESTA_BOTAO3_TRUE

TESTA_BOTAO4_FALSE
	
	BSF	STATUS,C
	BTFSS	INPUT4
	BCF	STATUS,C
	RETURN
	
	;BSF	OUTRO_ESTADO
	;GOTO	TESTA_BOTAO4_TRUE

TESTA_BOTAO5_FALSE
	
	BSF	STATUS,C
	BTFSS	INPUT5
	BCF	STATUS,C
	RETURN
	
	;BSF	OUTRO_ESTADO
	;GOTO	TESTA_BOTAO5_TRUE


TESTA_BOTAO6_FALSE
	
	BSF	STATUS,C
	BTFSS	INPUT6
	BCF	STATUS,C
	RETURN
	
	;BSF	OUTRO_ESTADO
	;GOTO	TESTA_BOTAO6_TRUE


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	           		     TRATAMENTO DO COMANDO REPEAT				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

REPEAT
	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	MOVWF	VEZES_REPEAT_LO	
	
	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	MOVWF	VEZES_REPEAT_HI

REPEAT_VAR
	
	INCF	VEZES_REPEAT_HI,F
	
	CALL	INC_PONTEIRO
	MOVF	ENDERECO_LO,W
	MOVWF	ENDERECO_LO_REPEAT
	MOVF	ENDERECO_HI,W
	MOVWF	ENDERECO_HI_REPEAT
	
REPEAT_A

	CALL	I2C_READ
	MOVLW	FIM_REPEAT
	XORWF	BUFFER,W
	BTFSC	STATUS,Z
	GOTO	REPEAT_B
	CALL	DECODIFICA_INSTRUCAO
	GOTO	REPEAT_A
	
REPEAT_B	
	DECFSZ	VEZES_REPEAT_LO,F
	GOTO	REPEAT_C
	
	DECFSZ	VEZES_REPEAT_HI,F
	GOTO	REPEAT_C
	GOTO	INC_PONTEIRO

REPEAT_C

	MOVF	ENDERECO_LO_REPEAT,W
	MOVWF	ENDERECO_LO
	MOVF	ENDERECO_HI_REPEAT,W
	MOVWF	ENDERECO_HI
	GOTO	REPEAT_A	
		
RESTORE
	MOVF	ENDERECO_LO_REPEAT,W
	MOVWF	ENDERECO_LO
	MOVF	ENDERECO_HI_REPEAT,W
	MOVWF	ENDERECO_HI
	RETURN
	
EXIT_REPEAT
	
	MOVLW	FIM_REPEAT
	BCF	OPERACAO
	GOTO	PROCURA_CARACTERE
		
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	     		      ROTINA DE PROCURA DE CÓDIGO NA MEMÓRIA					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

PROCURA_CARACTERE

	MOVWF	TEMP
	
PROCURA_CARACTERE_A

	CALL	I2C_READ
	;CALL	INC_PONTEIRO
	MOVF	BUFFER,W
	XORWF	TEMP,W
	BTFSS	STATUS,Z	
	GOTO	PROCURA_CARACTERE_B
	BTFSC	OPERACAO
	RETURN
	GOTO	INC_PONTEIRO

PROCURA_CARACTERE_B
	
	CALL	INC_PONTEIRO
	GOTO	PROCURA_CARACTERE_A

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	           		        RECARREGA PONTEIRO					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

RECARREGA_PONTEIRO
	CALL	LIMPA_PONTEIRO
	GOTO	INC_PONTEIRO

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	    MOSTRA MENSAGENS NA LINHA DE DISPLAY SUPERIOR E INFERIOR LIMPA O DISPLAY			*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

LINHA_DISPLAY_SUPERIOR
	MOVLW	LINHA_SUP
LINHA_DISP_A

	CALL	LCD_COMANDO
	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	MOVWF	TEMP
	
LINHA_DISP_B
	
	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	CALL	ENVIA_DISP
	DECFSZ	TEMP,F
	GOTO	LINHA_DISP_B
	GOTO	INC_PONTEIRO
	
LINHA_DISPLAY_INFERIOR
	MOVLW	LINHA_INF
	GOTO	LINHA_DISP_A
	

LIMPA_O_DISPLAY
	MOVLW	LIMPA_LCD
	CALL	LCD_COMANDO
	GOTO	INC_PONTEIRO


ROTATE_MESSAGE_TOLEFT

	MOVLW	0x18
	CALL	LCD_COMANDO
	GOTO	INC_PONTEIRO
	

ROTATE_MESSAGE_TORIGHT

	MOVLW	0x1C
	CALL	LCD_COMANDO
	GOTO	INC_PONTEIRO


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	  		       TRANSMISSÃO/RECEPÇÃO DE DADOS PELA USART					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

RECEPCAO_SERIAL
	
	BTFSS	DADO_RX
	GOTO	SAI_DO_IF
	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	XORWF	BUFFER_SERIAL,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF
	BCF	DADO_RX
	GOTO	INC_PONTEIRO
	

TRANSMITE_DADOS
	
	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	MOVWF	TEMP
	
TRANSMITE_DADOS_A
	
	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C
	CALL	TXDATA_TO_PC
	DECFSZ	TEMP,F
	GOTO	TRANSMITE_DADOS_A
	
	BTFSS	MODO_PANEL		; ESTÁ NO MODO PANEL?
	GOTO	TRANSMITE_FIM		; NÃO
	GOTO	INC_PONTEIRO		; SIM
	
	;MOVLW	LF
	;CALL	TXDATA_TO_PC
	;MOVLW	CR
	;CALL	TXDATA_TO_PC
	;GOTO	INC_PONTEIRO
	

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		       ROTINAS DE DELAY						*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TRATA_DELAY_MS
	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C

TRATA_DELAY_MS_A

	CALL	DELAY_MS
	GOTO	INC_PONTEIRO
	
TRATA_DELAY_SEG
	;CALL	INC_PONTEIRO
	;CALL	I2C_READ
	;MOVF	BUFFER,W
	CALL	LE_I2C

TRATA_DELAY_SEG_A

	CALL	DELAY_SEG
	GOTO	INC_PONTEIRO	

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		   ACIONAMENT0/DE DOS RELÊS					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

OSCILACAO_RELE1

	BSF	OSC_RELE1
	GOTO	INC_PONTEIRO
	
OSCILACAO_RELE2

	BSF	OSC_RELE2
	GOTO	INC_PONTEIRO

OSCILACAO_RELE3

	BSF	OSC_RELE3
	GOTO	INC_PONTEIRO
	
OSCILACAO_RELE4

	BSF	OSC_RELE4
	GOTO	INC_PONTEIRO

OSCILACAO_RELE5

	BSF	OSC_RELE5
	GOTO	INC_PONTEIRO
	
OSCILACAO_RELE6

	BSF	OSC_RELE6
	GOTO	INC_PONTEIRO


;ROTATE_LEFT
;	
;	BCF	STATUS,C
;	RLF	REG_595,F
;	
;	BCF	REG_595,0
;	BTFSC	REG_595,6
;	BSF	REG_595,0
;	GOTO	OUT_DADOS
;	
;ROTATE_RIGHT
;
;	BCF	STATUS,C
;	RRF	REG_595,F
;	
;	BCF	REG_595,5
;	BTFSC	STATUS,C
;	BSF	REG_595,5
;	GOTO	OUT_DADOS
;

;NOT_RELE
;	COMF	REG_595,F
;	GOTO	OUT_DADOS
;
;ESPELHA_IN_OUT
;	
;	CLRF	REG_595
;	
;	BTFSS	INPUT1
;	BSF	RELE1
;	BTFSS	INPUT2
;	BSF	RELE2
;	BTFSS	INPUT3
;	BSF	RELE3
;	BTFSS	INPUT4
;	BSF	RELE4
;	BTFSS	INPUT5
;	BSF	RELE5
;	BTFSS	INPUT6
;	BSF	RELE6
;	
;	GOTO	OUT_DADOS
;	
;INCREMENTA_SAIDA
;	MOVLW	B'00111111'
;	ANDWF	REG_595,F
;	MOVLW	.63
;	XORWF	REG_595,W
;	BTFSC	STATUS,Z
;	GOTO	INC_PONTEIRO
;	INCF	REG_595,F
;	GOTO	OUT_DADOS
;	
;DECREMENTA_SAIDA
;	MOVLW	B'00111111'
;	ANDWF	REG_595,F
;	MOVF	REG_595,F
;	BTFSC	STATUS,Z
;	GOTO	INC_PONTEIRO
;	DECF	REG_595,F
;	GOTO	OUT_DADOS		
;	
;CARREGA_SAIDA
;	;CALL	INC_PONTEIRO
;	;CALL	I2C_READ
;	;MOVF	BUFFER,W
;	CALL	LE_I2C
;	MOVWF	REG_595
;	GOTO	OUT_DADOS
;		
LIGAR_TODOS_RELES
	
	MOVLW	B'10101010'
	MOVWF	REG_74_LO
	MOVLW	B'00001100'
	MOVWF	REG_74_HI
	GOTO	OUT_DADOS

DESLIGAR_TODOS_RELES
	
	BCF	OSC_RELE1
	BCF	OSC_RELE2
	BCF	OSC_RELE3
	BCF	OSC_RELE4
	BCF	OSC_RELE5
	BCF	OSC_RELE6
	
	CLRF	REG_74_LO
	CLRF	REG_74_HI
	GOTO	OUT_DADOS	

TRATAMENTO_RELE

	CALL	INC_PONTEIRO
	CALL	I2C_READ
	MOVF	BUFFER,F
	RETURN
		
LIGA_RELE1
	
	CALL	TRATAMENTO_RELE
	
	BTFSS	STATUS,Z
	GOTO	INVERTE_RELE1
	
	BSF	RELE1POS
	BCF	RELE1NEG
	GOTO	OUT_DADOS

INVERTE_RELE1
	
	BCF	RELE1POS
	BSF	RELE1NEG
	GOTO	OUT_DADOS
	
LIGA_RELE2

	CALL	TRATAMENTO_RELE
	
	BTFSS	STATUS,Z
	GOTO	INVERTE_RELE2
	
	BSF	RELE2POS
	BCF	RELE2NEG
	GOTO	OUT_DADOS

INVERTE_RELE2
	
	BCF	RELE2POS
	BSF	RELE2NEG
	GOTO	OUT_DADOS
	
LIGA_RELE3

	CALL	TRATAMENTO_RELE
	
	BTFSS	STATUS,Z
	GOTO	INVERTE_RELE3
	
	BSF	RELE3POS
	BCF	RELE3NEG
	GOTO	OUT_DADOS

INVERTE_RELE3
	
	BCF	RELE3POS
	BSF	RELE3NEG
	GOTO	OUT_DADOS
	
	
LIGA_RELE4

	CALL	TRATAMENTO_RELE
	
	BTFSS	STATUS,Z
	GOTO	INVERTE_RELE4
	
	BSF	RELE4POS
	BCF	RELE4NEG
	GOTO	OUT_DADOS

INVERTE_RELE4
	
	BCF	RELE4POS
	BSF	RELE4NEG
	GOTO	OUT_DADOS
	
LIGA_RELE5

	CALL	TRATAMENTO_RELE
	
	BTFSS	STATUS,Z
	GOTO	INVERTE_RELE5
	
	BSF	RELE5POS
	BCF	RELE5NEG
	GOTO	OUT_DADOS

INVERTE_RELE5
	
	BCF	RELE5POS
	BSF	RELE5NEG
	GOTO	OUT_DADOS
	
LIGA_RELE6
	BSF	RELE6
	GOTO	OUT_DADOS

DESLIGA_RELE1
	
	BCF	OSC_RELE1
	BCF	RELE1NEG
	BCF	RELE1POS
	GOTO	OUT_DADOS

DESLIGA_RELE2
	
	BCF	OSC_RELE2
	BCF	RELE2NEG
	BCF	RELE2POS
	GOTO	OUT_DADOS

DESLIGA_RELE3
	
	BCF	OSC_RELE3
	BCF	RELE3NEG
	BCF	RELE3POS
	GOTO	OUT_DADOS
	
DESLIGA_RELE4
	
	BCF	OSC_RELE4
	BCF	RELE4NEG
	BCF	RELE4POS
	GOTO	OUT_DADOS
	
DESLIGA_RELE5
	
	BCF	OSC_RELE5
	BCF	RELE5NEG
	BCF	RELE5POS
	GOTO	OUT_DADOS
	
DESLIGA_RELE6
	
	BCF	OSC_RELE6
	BCF	RELE6
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	 		  SAÍDA DE DADOS PARA SHIFT REGISTER			*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

OUT_DADOS

	CALL	CONFIG_TRIS_OUT
	MOVLW	.16
	MOVWF	CONTADOR
	
	;MOVF	REG_595,W
	;MOVWF	DADO
	
	MOVF	REG_74_LO,W
	BANK1
	MOVWF	ESP_74_LO
	BANK0
	
	MOVF	REG_74_HI,W
	BANK1
	MOVWF	ESP_74_HI				;MOVE OS VALORES A SEREM CARREGADOS NA SAÍDA
	BANK0	
	
	;BCF	INTCON,GIE
		
OUT_DADOS_A

	;BCF	STATUS,C
	;RLF	DADO,F
	
	BANK1
	RLF	ESP_74_LO,F
	RLF	ESP_74_HI,F
	BANK0
	
	BTFSC	STATUS,C
	BSF	DATA_
	BTFSS	STATUS,C
	BCF  	DATA_

	BCF	CLOCK
	;GOTO	$+1
	;GOTO	$+1
	BSF	CLOCK

	DECFSZ	CONTADOR,F
	GOTO	OUT_DADOS_A
	
	;BSF	INTCON,GIE
	
	CALL	CONFIG_TRIS_IN
	
	
	BTFSS	ESCOLHE_RETORNO	
	GOTO	INC_PONTEIRO
	BCF	ESCOLHE_RETORNO
	RETURN

OUT_DADOS_B

	BSF	ESCOLHE_RETORNO
	GOTO	OUT_DADOS
	

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		COMANDO NÃO IDENTIFICADO					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
	
ERRO_COMANDO
	
	;BSF	ERRO
	;RETURN

TRATA_ERRO	
	
	;MOVLW	LIMPA_LCD
	;CALL	LCD_COMANDO
	
	;BSF	HI_LO
	;MOVLW	MENSAGEM_ERRO_HI
	;CALL	MOSTRA_MENSAGENS
	
	;BCF	HI_LO
	;MOVLW	MENSAGEM_ERRO_LO
	;CALL	MOSTRA_MENSAGENS


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		      FIM DO PROGRAMA						*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
	
FIM_DO_PROGRAMA

	;BCF	TEM_PROG
	;RETURN
			
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  FIM DA PÁGINA 0					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

	ORG 0x07FF
	

	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  INÍCIO DA PÁGINA 1					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*


	ORG 0x0800

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  DECODIFICAÇÃO DE INTRUÇÕES II					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DECODIFICA_INSTRUCAO_II
	
	MOVLW	HIGH (SALTO_DEC_INSTRUCAO_II)
	MOVWF	PCLATH
	MOVF	BUFFER,W
	ADDLW	LOW  (SALTO_DEC_INSTRUCAO_II)
	BTFSC	STATUS,C
	INCF	PCLATH,F
	MOVWF	PCL
	
SALTO_DEC_INSTRUCAO_II
	
	GOTO	DISP1_PULSECOUNTER		; OPCODE 0
	GOTO	DISP2_PULSECOUNTER		; OPCODE 1
	GOTO	IF_PULSECOUNTER_IGUAL		; OPCODE 2
	GOTO	IF_PULSECOUNTER_MAIOR		; OPCODE 3
	GOTO	IF_PULSECOUNTER_MENOR		; OPCODE 4
	GOTO	CLEAR_PULSECOUNTER		; OPCODE 5
	GOTO	BEGIN_PULSECOUNTER		; OPCODE 6
	GOTO	STOP_PULSECOUNTER		; OPCODE 7
	GOTO	INPUT6_AS_PULSECOUNTER		; OPCODE 8
	GOTO	SET_OSC_DISPLAY			; OPCODE 9
	GOTO	SET_NO_OSC_DISPLAY		; OPCODE 10
	GOTO	LOAD_WAVE_GENERATOR		; OPCODE 11
	GOTO	INICIALIZAR_X			; OPCODE 12
	GOTO	TESTA_IGUAL_X			; OPCODE 13
	GOTO	DISP1_X_LPA			; OPCODE 14
	GOTO	DISP2_X_LPA			; OPCODE 15
	GOTO	TESTA_MAIOR_X			; OPCODE 16
	GOTO	TESTA_MENOR_X			; OPCODE 17
	GOTO	SOMA_CONSTANTE_X		; OPCODE 18
	GOTO	SUBTRAI_CONSTANTE_X		; OPCODE 19
	GOTO	MULTIPLY_X_CTE			; OPCODE 20
	GOTO	DIVIDE_X_CTE			; OPCODE 21
	GOTO	POTENCIA_X_CTE			; OPCODE 22
	GOTO	DISP1_BINARY_VAR		; OPCODE 23
	GOTO	DISP2_BINARY_VAR		; OPCODE 24
	GOTO	DISP1_HEX_VAR			; OPCODE 25
	GOTO	DISP2_HEX_VAR			; OPCODE 26
	GOTO 	XOR_VAR_LPA			; OPCODE 27
	GOTO	AND_VAR_LPA			; OPCODE 28
	GOTO	OR_VAR_LPA			; OPCODE 29
	GOTO	NOT_VAR_LPA			; OPCODE 30
	GOTO	SWAP_VAR_LPA			; OPCODE 31
	GOTO	DISP1_OCT_VAR			; OPCODE 32
	GOTO	DISP2_OCT_VAR			; OPCODE 33
	GOTO	CALCULA_PERCENTAGEM_MAIS	; OPCODE 34
	GOTO	CALCULA_SQUARE			; OPCODE 35
	GOTO	CALCULA_PERCENTAGEM_MENOS	; OPCODE 36
	GOTO	IF_IN_VALOR			; OPCODE 37	
	GOTO	IF_OUT_VALOR			; OPCODE 38
	GOTO	TXDATA_VAR_DEC			; OPCODE 39
	GOTO	TXDATA_VAR_HEX			; OPCODE 40
	GOTO	TXDATA_VAR_BIN			; OPCODE 41
	GOTO	TXDATA_VAR_OCT			; OPCODE 42
	GOTO	TRATA_REPEAT_VARIAVEL		; OPCODE 43
	GOTO	SELECT_CASE			; OPCODE 44
	GOTO	WHILE_VARIAVEL			; OPCODE 45
	GOTO	WHILE_NOT_VARIAVEL		; OPCODE 46
	GOTO	LE_RANDOM			; OPCODE 47	
	GOTO	CALCULA_FATORIAL		; OPCODE 48
	GOTO	DELAY_MS_VARIAVEL		; OPCODE 49
	GOTO	DELAY_SEG_VARIAVEL		; OPCODE 50
	GOTO	CALL_LPA			; OPCODE 51
	GOTO	ATRIBUI_CARACTER_LPA		; OPCODE 52
	GOTO	TESTE_CARACTER_LPA		; OPCODE 53	
	GOTO	DISP1_CARACTER_ASCII		; OPCODE 54
	GOTO	DISP2_CARACTER_ASCII		; OPCODE 55
	GOTO	DISP1_CARACTER_BINARY		; OPCODE 56
	GOTO	DISP2_CARACTER_BINARY		; OPCODE 57
	GOTO	DISP1_CARACTER_HEX		; OPCODE 58
	GOTO	DISP2_CARACTER_HEX		; OPCODE 59
	GOTO	TXDATA_CARACTER_ASCII		; OPCODE 60
	GOTO	TXDATA_CARACTER_BINARY		; OPCODE 61
	GOTO	TXDATA_CARACTER_HEX		; OPCODE 62
	GOTO	ACERTA_HORA			; OPCODE 63
	GOTO	ACERTA_DATA			; OPCODE 64
	GOTO	TESTA_DATE			; OPCODE 65
	GOTO	CALCULA_VELOCIDADE		; OPCODE 66
	GOTO	DISP1_VELOCIDADE		; OPCODE 67
	GOTO	DISP2_VELOCIDADE		; OPCODE 68
	GOTO	SPACE_DEFAULT			; OPCODE 69
	GOTO	IFSPEED_IGUAL			; OPCODE 70
	GOTO	IFSPEED_MAIOR			; OPCODE 71
	GOTO	IFSPEED_MENOR			; OPCODE 72
	GOTO	CALCULA_HIPOTENUSA		; OPCODE 73
	GOTO	CALCULA_CIRCUNFERENCIA		; OPCODE 74
	GOTO	CALCULA_AREA_CIRCUNFERENCIA	; OPCODE 75
	GOTO	SHUTDOWN_ON			; OPCODE 76
	GOTO	SHUTDOWN_OFF			; OPCODE 77
	GOTO 	DISP1_MONTH			; OPCODE 78
	GOTO	DISP2_MONTH			; OPCODE 79		
	GOTO	INC_PONTEIRO2			; OPCODE 80
	GOTO	ECOA_DADOS_PC			; OPCODE 81
	GOTO	NOT_ECOA_DADOS_PC		; OPCODE 82
	GOTO	APAGA_PROGRAMA			; OPCODE 83
	GOTO	APAGA_DADOS			; OPCODE 84
	GOTO	ALTERA_BAUD_RATE		; OPCODE 85
	GOTO 	TERMINAL			; OPCODE 86
	GOTO	GAME				; OPCODE 87
	GOTO 	IFGAME				; OPCODE 88
	GOTO	IFNOGAME			; OPCODE 89
	GOTO	IF_TIME_MAIOR			; OPCODE 90	
	GOTO	IF_TIME_MENOR			; OPCODE 91
	GOTO	GENERAL_IGUAL_VARIAVEL		; OPCODE 92
	GOTO	VARIAVEL_IGUAL_GENERAL		; OPCODE 93	
	GOTO	SOMA_GENERAL			; OPCODE 94
	GOTO	SUBTRAI_GENERAL			; OPCODE 95
	GOTO	MULTIPLY_GENERAL		; OPCODE 96
	GOTO	DIVIDE_GENERAL			; OPCODE 97
	GOTO	DISP1_RPM			; OPCODE 98
	GOTO	DISP2_RPM			; OPCODE 99
	GOTO	INPUT6_RPM			; OPCODE 100
	GOTO	MUDA_ALETA			; OPCODE 101
	GOTO 	CALCULA_ANG_SPEED		; OPCODE 102
	GOTO	POE_EM_PANEL			; OPCODE 103
	GOTO	IF_EXPANSAO_TRUE		; OPCODE 104
	GOTO	IF_EXPANSAO_FALSE		; OPCODE 105
	GOTO	DISP1_PERIODIMETER		; OPCODE 106
	GOTO	DISP2_PERIODIMETER		; OPCODE 107
	GOTO	ATUALIZA_DATA_PAINEL		; OPCODE 108
	GOTO	ATUALIZA_HORA_PAINEL		; OPCODE 109
	GOTO	GOTOXY_1			; OPCODE 110
	GOTO	GOTOXY_0			; OPCODE 111

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*            ROTINAS PARA ATUALIZAR MODO PIXEL NO PAINEL		*
;*	*	*	*	*	*	*	*	*	*	*

GOTOXY_1
	
	CALL	LE_I2C_II
	MOVWF	FSR
	CALL	LE_I2C_II
	IORWF	INDF,F
	GOTO	ATUALIZA_PIXEL
	
GOTOXY_0
	
	CALL	LE_I2C_II
	MOVWF	FSR
	CALL	LE_I2C_II
	ANDWF	INDF,F
	
ATUALIZA_PIXEL

	MOVLW	.218
	SUBWF	FSR,W
	PAGE0
	CALL	TXDATA_TO_PC
	MOVF	INDF,W
	CALL	TXDATA_TO_PC
	CALL	TXDATA_TO_PC
	GOTO	INC_PONTEIRO

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*            ROTINAS PARA ATUALIZAR DATA/HORA NO PAINEL			*
;*	*	*	*	*	*	*	*	*	*	*

ATUALIZA_DATA_PAINEL
	
	MOVLW	DIA
	MOVWF	FSR
	MOVLW	.1
	
TX_COMUM
	
	;BCF	INTCON,GIE
	PAGE0
	CALL	TXDATA_TO_PC
	;CLRF	DADO
	CLRF	TEMP
	MOVF	INDF,W
	ADDWF	TEMP
	CALL	TXDATA_TO_PC
	INCF	FSR,F
	MOVF	INDF,W
	ADDWF	TEMP
	CALL	TXDATA_TO_PC
	INCF	FSR,F
	MOVF	INDF,W
	ADDWF	TEMP
	CALL	TXDATA_TO_PC
	MOVF	TEMP,W
	CALL	TXDATA_TO_PC
	;BSF	INTCON,GIE
	GOTO	INC_PONTEIRO
	
ATUALIZA_HORA_PAINEL
	
	MOVLW	HORA
	MOVWF	FSR
	MOVLW	.0
	GOTO	TX_COMUM
				
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*                ROTINAS PARA COLOCAR EM MODO PANEL			*
;*	*	*	*	*	*	*	*	*	*	*

POE_EM_PANEL

	BSF	MODO_PANEL
	GOTO	INC_PONTEIRO2

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*                ROTINAS PARA CALCULO DO PERIODÍMETRO 				*
;*	*	*	*	*	*	*	*	*	*	*

DISP1_PERIODIMETER
	
	BSF	MODO_PERIODIMETRO
	
	BTFSS	PODE_CONVERTER
	GOTO	INC_PONTEIRO2
	
	BCF	PODE_CONVERTER
	PAGE0
	CALL	DISP1_FREQ
	PAGE1
	RETURN
	
	
DISP2_PERIODIMETER
		
	BSF	MODO_PERIODIMETRO
	
	BTFSS	PODE_CONVERTER		; PODE MOSTRAR DADOS NO DISPLAY?
	GOTO	INC_PONTEIRO2		; NAO
	
	BCF	PODE_CONVERTER
	PAGE0
	CALL	DISP2_FREQ
	PAGE1
	RETURN

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*                ROTINAS DE ACESSO A PLACA DE I/O EXPANDIDA 				*
;*	*	*	*	*	*	*	*	*	*	*
	
CMD_VAGO

	;CALL	LE_I2C_II
	;PAGE0
	;CALL	TXDATA_TO_PC
	;PAGE1
	GOTO	INC_PONTEIRO2
	
IF_EXPANSAO_TRUE
	
	CALL	LE_I2C_II
	PAGE0
	CALL	TXDATA_TO_PC
	MOVLW	.100
	CALL	DELAY_MS
	PAGE1
	
	BTFSS	DADO_RX
	GOTO	SAI_DO_IF_II
	
	BCF	DADO_RX
	MOVLW	'1'
	XORWF	BUFFER_SERIAL,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2
	
IF_EXPANSAO_FALSE
	
	CALL	LE_I2C_II
	PAGE0
	CALL	TXDATA_TO_PC
	MOVLW	.100
	CALL	DELAY_MS
	PAGE1
	
	BTFSS	DADO_RX
	GOTO	SAI_DO_IF_II
	
	BCF	DADO_RX
	MOVLW	'0'
	XORWF	BUFFER_SERIAL,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2

		
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*                ROTINA DE CALCULO DE VELOCIDADE ANGULAR  				*
;*	*	*	*	*	*	*	*	*	*	*

CALCULA_ANG_SPEED
	
	MOVF	ANG_SPEED_LO,W
	MOVWF	MULTIPLICANDO_DIVISOR
	
	MOVLW	LOW  .628
	MOVWF	MULTIPLICADOR_DIVIDENDO
	
	MOVLW	HIGH .628
	MOVWF	MULTIPLICANDO_2
	
	CALL 	CHAMA_MULTIPLICACAO
	
	CALL	TABELA_VAR
	MOVWF	FSR
	
	MOVF	RESULTADO_LO,W
	MOVWF	INDF
	
	INCF	FSR,F
	
	MOVF	RESULTADO_HI,W
	MOVWF	INDF
	
	GOTO	INC_PONTEIRO2
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*                      ROTINA DE TRATAMENTO DE RPM  				*
;*	*	*	*	*	*	*	*	*	*	*

MUDA_ALETA
	
	CALL	LE_I2C_II
	BANK1
	MOVWF	ALETAS
	MOVWF	ALETAS_2
	BANK0
	
	GOTO	INC_PONTEIRO2
	
INPUT6_RPM
	
	BSF	MODO_RPM
	PAGE0
	GOTO	INPUT6_AS_FREQ
		
DISP1_RPM
	
	PAGE0
	GOTO	DISP1_FREQ
	
DISP2_RPM

	PAGE0
	GOTO	DISP2_FREQ
	
				
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*                     TRATAMENTO DO OPCODE DO GENERAL  				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DIVIDE_GENERAL

	BSF	F_GERAL
		
MULTIPLY_GENERAL

	CALL	TABELA_VAR
	MOVWF	FSR
	
	MOVF	INDF,W
	MOVWF	MULTIPLICANDO_DIVISOR
	
	MOVF	GENERAL_LO,W
	MOVWF	MULTIPLICADOR_DIVIDENDO
	
	MOVF	GENERAL_HI,W
	MOVWF	MULTIPLICANDO_2
	
	BTFSS	F_GERAL
	CALL	CHAMA_MULTIPLICACAO
	BTFSC	F_GERAL
	CALL	DIVIDE
	
	BCF	F_GERAL
	MOVLW	GENERAL_HI
	MOVWF	FSR
	GOTO	MULTIPLY_X_CTE_A
	
SUBTRAI_GENERAL

	CALL	TABELA_VAR
	MOVWF	FSR
	
	MOVF	INDF,W
	SUBWF	GENERAL_LO,F
	BTFSS	STATUS,C
	DECF	GENERAL_HI,F
	
	INCF	FSR,F
	MOVF	INDF,W
	SUBWF	GENERAL_HI,F
	
	GOTO	INC_PONTEIRO2
	
		
SOMA_GENERAL

	CALL	TABELA_VAR
	MOVWF	FSR
		
	MOVF	INDF,W
	ADDWF	GENERAL_LO,F
	BTFSC	STATUS,C
	INCF	GENERAL_HI,F
	
	INCF	FSR,F
	MOVF	INDF,W
	ADDWF	GENERAL_HI,F
	
	GOTO	INC_PONTEIRO2

GENERAL_IGUAL_VARIAVEL
	
	CALL	TABELA_VAR
	MOVWF	FSR
		
	MOVF	INDF,W
	MOVWF	GENERAL_LO
	
	INCF	FSR,F

	MOVF	INDF,W
	MOVWF	GENERAL_HI
	
	GOTO	INC_PONTEIRO2

VARIAVEL_IGUAL_GENERAL
	
	CALL	TABELA_VAR
	MOVWF	FSR
	
	MOVF	GENERAL_LO,W
	MOVWF	INDF
	
	INCF	FSR,F
	
	MOVF	GENERAL_HI,W
	MOVWF	INDF
	
	GOTO	INC_PONTEIRO2
	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*                          IF TIME MAIOR OU MENOR  				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

IF_TIME_MAIOR
	
	CALL	CARREGA_VAR
	
	MOVF	AUX_MATEMATICA_HI,W
	SUBWF	HORA,W
	BTFSC	STATUS,Z
	GOTO	$+4
	BTFSS	STATUS,C
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2
	
	MOVF	AUX_MATEMATICA_LO,W
	SUBWF	MINUTO,W
	BTFSC	STATUS,Z
	GOTO	SAI_DO_IF_II
	BTFSS	STATUS,C
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2
	

IF_TIME_MENOR

		
	CALL	CARREGA_VAR
	
	MOVF	AUX_MATEMATICA_HI,W
	SUBWF	HORA,W
	BTFSC	STATUS,Z
	GOTO	$+4
	BTFSC	STATUS,C
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2
	
	MOVF	AUX_MATEMATICA_LO,W
	SUBWF	MINUTO,W
	BTFSC	STATUS,C
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*                              FUNÇÃO GAME  				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

IFGAME
	
	BTFSS	GAME_WINNER
	GOTO	SAI_DO_IF_II
	BCF	GAME_WINNER
	GOTO	INC_PONTEIRO2

IFNOGAME
	
	BTFSC	GAME_WINNER
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2

GAME

	MOVF	RANDOM,W
	MOVWF	AUX2
	BCF	STATUS,C
	RLF	AUX2,F
	BCF	STATUS,C
	RLF	AUX2,W
	ANDLW	B'00111111'
	MOVWF	AUX2
	
	MOVLW	.1
	CALL	TEMPO_LCD3
	CALL	TEMPO_DISP_TERM
	
	MOVLW	.128
	MOVWF	PONTEIRO_DISP
		
	BCF	CAR_1
	BCF	CAR_2
	BCF	CAR_3
	BCF	CAR_4
GAME_A
	
	MOVLW	.193
	CALL	TEMPO_LCD3
	CALL	TEMPO_DISP_TERM
	MOVLW	'A'
	MOVWF	CARACTER_ASCII
	CALL	TEMPO_LCD4
	
	MOVLW	'_'
	MOVWF	REG_GAME_A
	MOVWF	REG_GAME_B
	MOVWF	REG_GAME_C
	MOVWF	REG_GAME_D
	CALL	AJUSTA_WORD
		
	CALL	CARREGA_PALAVRA
	MOVWF	AUX_GAME_A
	CALL	CARREGA_PALAVRA
	MOVWF	AUX_GAME_B
	CALL	CARREGA_PALAVRA
	MOVWF	AUX_GAME_C
	CALL	CARREGA_PALAVRA
	MOVWF	AUX_GAME_D
		
GAME_B
			
	CALL	CARREGA_AUX2
	BTFSC	INPUT1				; SENSOR 1 ATIVO?
	GOTO	GAME_C
	DECFSZ	AUX2,F
	GOTO	$-3
	
	CALL	CARREGA_AUX2
	BTFSS	INPUT1				; SENSOR 1 NÃO ATIVO?
	GOTO	$-2				; NÃO, ENTÃO AGUARDA
	DECFSZ	AUX2,F
	GOTO	$-3
	
	INCF	CARACTER_ASCII,F
	MOVLW	'Z'+1
	XORWF	CARACTER_ASCII,W
	BTFSS	STATUS,Z
	GOTO	ATU_DISP_GAME
	MOVLW	'A'
	MOVWF	CARACTER_ASCII
		
ATU_DISP_GAME		
	
	MOVLW	.193
	CALL	TEMPO_LCD3
	CALL	TEMPO_DISP_TERM
	MOVF	CARACTER_ASCII,W
	CALL	TEMPO_LCD4
	
GAME_C	
	
	CALL	CARREGA_AUX2
	BTFSC	INPUT2
	GOTO	GAME_D
	DECFSZ	AUX2,F
	GOTO	$-3
	
	CALL	CARREGA_AUX2
	BTFSS	INPUT2
	GOTO	$-2	
	DECFSZ	AUX2,F
	GOTO	$-3

	DECF	CARACTER_ASCII,F
	MOVLW	'A'-1
	XORWF	CARACTER_ASCII,W
	BTFSS	STATUS,Z
	GOTO	ATU_DISP_GAME
	MOVLW	'Z'
	MOVWF	CARACTER_ASCII
	GOTO	ATU_DISP_GAME
	
GAME_D
	
	CALL	CARREGA_AUX2
	BTFSC	INPUT3
	GOTO	GAME_B
	DECFSZ	AUX2,F
	GOTO	$-3
	
	CALL	CARREGA_AUX2
	BTFSS	INPUT3
	GOTO	$-2	
	DECFSZ	AUX2,F
	GOTO	$-3
		
	BCF	ACHOU_CARACTER
	
	MOVF	CARACTER_ASCII,W
	XORWF	AUX_GAME_A,W
	
	BTFSS	STATUS,Z
	GOTO	TEST_GAME_A
	
	MOVF	CARACTER_ASCII,W
	MOVWF	REG_GAME_A
	BSF	CAR_1
	BSF	ACHOU_CARACTER
	
TEST_GAME_A
	
	MOVF	CARACTER_ASCII,W
	XORWF	AUX_GAME_B,W
	
	BTFSS	STATUS,Z
	GOTO	TEST_GAME_B
	
	MOVF	CARACTER_ASCII,W
	MOVWF	REG_GAME_B
	BSF	CAR_2
	BSF	ACHOU_CARACTER
	
TEST_GAME_B	
	
	MOVF	CARACTER_ASCII,W
	XORWF	AUX_GAME_C,W
	
	BTFSS	STATUS,Z
	GOTO	TEST_GAME_C
	
	MOVF	CARACTER_ASCII,W
	MOVWF	REG_GAME_C
	BSF	CAR_3
	BSF	ACHOU_CARACTER
	
TEST_GAME_C
	
	MOVF	CARACTER_ASCII,W
	XORWF	AUX_GAME_D,W
	
	BTFSS	STATUS,Z
	GOTO	TEST_GAME_D
	
	MOVF	CARACTER_ASCII,W
	MOVWF	REG_GAME_D
	BSF	CAR_4
	BSF	ACHOU_CARACTER
	
TEST_GAME_D

	CALL	AJUSTA_WORD
	
	BTFSS	CAR_1
	GOTO	CHECA_ERRO
	
	BTFSS	CAR_2
	GOTO	CHECA_ERRO
	
	BTFSS	CAR_3
	GOTO	CHECA_ERRO
	
	BTFSS	CAR_4
	GOTO	CHECA_ERRO
	
	BSF	GAME_WINNER
	GOTO	INC_PONTEIRO2
	
CHECA_ERRO

	BTFSC	ACHOU_CARACTER
	GOTO	GAME_B
	
	MOVLW	.144
	XORWF	PONTEIRO_DISP,W
	BTFSS	STATUS,Z
	GOTO	CHECA_ERRO_A
	BCF	GAME_WINNER
	GOTO	INC_PONTEIRO2

CHECA_ERRO_A

	MOVF	PONTEIRO_DISP,W
	CALL	TEMPO_LCD3
	CALL	TEMPO_DISP_TERM
	
	MOVLW	'#'	
	CALL	TEMPO_LCD4
	
	INCF	PONTEIRO_DISP,F
	GOTO	GAME_B
			

AJUSTA_WORD

	MOVLW	.199
	CALL	TEMPO_LCD3
	CALL	TEMPO_DISP_TERM
	
	MOVF	REG_GAME_A,W
	CALL	TEMPO_LCD4
	
	MOVF	REG_GAME_B,W
	CALL	TEMPO_LCD4
	
	MOVF	REG_GAME_C,W
	CALL	TEMPO_LCD4
	
	MOVF	REG_GAME_D,W
	GOTO	TEMPO_LCD4

CARREGA_PALAVRA

	MOVLW	HIGH SALTO_PALAVRA
	MOVWF	PCLATH
	
	MOVF	AUX2,W
	ADDLW	LOW  SALTO_PALAVRA
	
	INCF	AUX2,F
	BTFSC	STATUS,C
	INCF	PCLATH,F
	MOVWF	PCL
	
SALTO_PALAVRA
	
	DT	"OPEN"			; RETORNA PALAVRA 0
	DT	"HOME"			; RETORNA PALAVRA 1
	DT	"TAXI"			; RETORNA PALAVRA 2
	DT	"HALF"			; RETORNA PALAVRA 3
	DT	"MICE"			; RETORNA PALAVRA 4
	DT	"CITY"			; RETORNA PALAVRA 5
	DT	"SHIP"			; RETORNA PALAVRA 6
	DT	"HOUR"			; RETORNA PALAVRA 7
	DT	"FILM"			; RETORNA PALAVRA 8
	DT	"HARD"			; RETORNA PALAVRA 9
	DT	"CULT"			; RETORNA PALAVRA 10
	DT	"PICE"			; RETORNA PALAVRA 11
	DT	"BOOK"			; RETORNA PALAVRA 12
	DT	"BEEN"			; RETORNA PALAVRA 13
	DT	"PLAY"			; RETORNA PALAVRA 14
	DT	"FOOD"			; RETORNA PALAVRA 15
	

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*                          	COMANDO TERMINAL   				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TERMINAL
	
	BCF	F_TERMINAL
	CALL	LE_I2C_II
	;MOVWF	AUX2
	;MOVF	AUX2,W
	MOVWF	TEMPO_TERMINAL
	BTFSS	STATUS,Z
	BSF	F_TERMINAL
	BCF	DADO_RX
	;MOVWF	TEMPO_TERMINAL
	;BCF	FIM_TERM
	
TERMINAL_X
	
	MOVLW	.1
	CALL	TEMPO_LCD3
	
	CALL	TEMPO_DISP_TERM		
	MOVLW	.128
	MOVWF	AUX2

TERMINAL_A
	
	BTFSS	F_TERMINAL
	GOTO	$+4
	
	;BTFSC	FIM_TERM
	;GOTO	INC_PONTEIRO2
	MOVF	TEMPO_TERMINAL,F
	BTFSC	STATUS,Z
	GOTO	INC_PONTEIRO2
	
	BTFSS	DADO_RX
	GOTO	TERMINAL_A
	BCF	DADO_RX
	MOVF	BUFFER_SERIAL,W
	CALL	TEMPO_LCD4
		
	INCF	AUX2,F
	MOVLW	.144
	XORWF	AUX2,W
	BTFSS	STATUS,Z
	GOTO	TERMINAL_A
	
	MOVLW	.192
	MOVWF	AUX2
	CALL	TEMPO_LCD3
	CALL	TEMPO_DISP_TERM
		
TERMINAL_B
	
	;BTFSS	F_TERMINAL
	;GOTO	$+3
	
	;BTFSC	FIM_TERM
	;GOTO	INC_PONTEIRO2
	
	BTFSS	F_TERMINAL
	GOTO	$+4
	
	MOVF	TEMPO_TERMINAL,F
	BTFSC	STATUS,Z
	GOTO	INC_PONTEIRO2
	
	BTFSS	DADO_RX
	GOTO	TERMINAL_B
	
	INCF	AUX2,F
	MOVLW	.209
	XORWF	AUX2,W
	BTFSC	STATUS,Z
	GOTO	TERMINAL_X
	
	BCF	DADO_RX
	MOVF	BUFFER_SERIAL,W
	CALL	TEMPO_LCD4
		
	;INCF	AUX2,F
	;MOVLW	.208
	;XORWF	AUX2,W
	;BTFSS	STATUS,Z
	GOTO	TERMINAL_B
	;BTFSS	DADO_RX
	;GOTO	$-1
	;GOTO	TERMINAL_X
	
TEMPO_DISP_TERM

	MOVLW	.5
	PAGE0
	CALL	DELAY_MS
	PAGE1
	RETURN

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*              	COMANDO PARA ALTERAR O BAUD-RATE  				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

ALTERA_BAUD_RATE

	CALL	LE_I2C_II
	BANK1
	MOVWF	SPBRG
	BANK0
	GOTO	INC_PONTEIRO2	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*              	APAGA PROGRAMA/DADOS DE USUÁRIO  				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

APAGA_PROGRAMA
	
	CLRF	ENDERECO_LO			; POSICIONA NO ENDEREÇO 0
	CLRF	ENDERECO_HI
	
	MOVLW	.3				; ESCREVE CÓDIGO PARA APAGAR
	MOVWF	BUFFER				; PROGRAMA	
	PAGE0					
	CALL	I2C_WRITE			; ESCREVE O DADO NA MEMÓRIA
	PAGE1
	BSF	RESET
	GOTO	INC_PONTEIRO2

APAGA_DADOS	
	
	CALL	LIMPA_DADOS			; LIMPA DADOS
	GOTO	INC_PONTEIRO2			; INCREMENTA PONTEIRO	
	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*              MOSTRA NA LINHA 1 OU 2 DO DISPLAY O MES CORRENTE  				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

ECOA_DADOS_PC

	BSF	ECHO_DATA	
	GOTO	INC_PONTEIRO2
	
NOT_ECOA_DADOS_PC

	BCF	ECHO_DATA
	GOTO	INC_PONTEIRO2
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*              MOSTRA NA LINHA 1 OU 2 DO DISPLAY O MES CORRENTE  				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DISP1_MONTH

	MOVLW	LINHA_SUP
	
DISP1_MONTH_A
	
	CALL	TEMPO_LCD3
	
	MOVF	MES,W
	MOVWF	AUX2
	ADDWF	AUX2,W
	ADDWF	AUX2,F
	CALL	ACHA_CARACTERE_MES
	CALL	TEMPO_LCD4
	
	INCF	AUX2,F
	CALL	ACHA_CARACTERE_MES
	CALL	TEMPO_LCD4
	
	INCF	AUX2,F
	CALL	ACHA_CARACTERE_MES
	CALL	TEMPO_LCD4
	
	GOTO	INC_PONTEIRO2

ACHA_CARACTERE_MES
	
	MOVLW	HIGH CAR_MES_A
	MOVWF	PCLATH
	
	MOVF	AUX2,W
	ADDLW	LOW  CAR_MES_A
	BTFSC	STATUS,C
	INCF	PCLATH,F
	MOVWF	PCL
CAR_MES_A

	NOP
	NOP
	NOP
	DT	"JAN"		; RETORNA JANEIRO
	DT	"FEV"		; RETORNA FEVEREIRO
	DT	"MAR"		; RETORNA MARÇO
	DT	"ABR"		; RETORNA ABRIL
	DT	"MAI"		; RETORNA MAIO
	DT	"JUN"		; RETORNA JUNHO
	DT	"JUL"		; RETORNA JULHO
	DT	"AGO"		; RETORNA AGOSTO
	DT	"SET"		; RETORNA SETEMBRO
	DT	"OUT"		; RETORNA ABRIL
	DT	"NOV"		; RETORNA NOVEMBRO
	DT	"DEZ"		; RETORNA DEZEMBRO
	

DISP2_MONTH
	
	MOVLW	LINHA_INF
	GOTO	DISP1_MONTH_A
	
	


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*    	                         MODO SHUTDOWN   				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

SHUTDOWN_ON
	
	BTFSC	SHUTDOWN			; MODO SHUTDOWN JÁ ESTÁ ATIVO?
	GOTO	INC_PONTEIRO2			; SIM, ENTÃO NÃO ATIVA NOVAMENTE
	
	MOVLW	.120
	MOVWF	REG_SHUTDOWN
	BSF	SHUTDOWN
	GOTO	INC_PONTEIRO2
	
SHUTDOWN_OFF

	BCF	SHUTDOWN
	GOTO	INC_PONTEIRO2

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*    	                 CALCULO DA ÁREA DE UM CÍRCULO   				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

CALCULA_AREA_CIRCUNFERENCIA

	BANK1
	MOVF	B_LO_LPA,W
	BANK0
	CALL	MULT_HIPOTENUSA
	
	MOVLW	.157
	MOVWF	MULTIPLICANDO_DIVISOR
	CALL	AREA_A

	MOVLW	.2
	MOVWF	MULTIPLICANDO_DIVISOR
	CALL	AREA_A
	
	MOVF	RESULTADO_LO,W
	BANK1
	MOVWF	A_LO_CASA1_LPA
	BANK0
	
	MOVF	RESULTADO_HI,W
	BANK1
	MOVWF	A_HI_CASA1_LPA
	BANK0
	
	GOTO	INC_PONTEIRO2
	
AREA_A
	
	MOVF	RESULTADO_LO,W
	MOVWF	MULTIPLICADOR_DIVIDENDO
	
	MOVF	RESULTADO_HI,W
	MOVWF	MULTIPLICANDO_2
		
	GOTO	CHAMA_MULTIPLICACAO
	
	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*    	            CALCULO DA CIRCUNFERÊNCIA DE UM CÍRCULO   				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

CALCULA_CIRCUNFERENCIA

	MOVLW	HIGH .628
	MOVWF	MULTIPLICANDO_2
		
	MOVLW	LOW  .628
	MOVWF	MULTIPLICADOR_DIVIDENDO
	
	BANK1
	MOVF	B_LO_LPA,W
	BANK0
	MOVWF	MULTIPLICANDO_DIVISOR

	CALL	CHAMA_MULTIPLICACAO

	MOVF	RESULTADO_LO,W
	BANK1
	MOVWF	A_LO_CASA1_LPA
	BANK0
	
	MOVF	RESULTADO_HI,W
	BANK1
	MOVWF	A_HI_CASA1_LPA
	BANK0
	
	GOTO	INC_PONTEIRO2
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*    	            CALCULA A HIPOTENUSA DE UM TRIÂNGULO RETO   				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
	
CALCULA_HIPOTENUSA
	
	BANK1
	CLRF	A_LO_LPA
	CLRF	A_HI_LPA
	MOVF	B_LO_LPA,W
	BANK0
	CALL	MULT_HIPOTENUSA
	
	MOVF	RESULTADO_LO,W
	BANK1
	MOVWF	A_LO_LPA
	BANK0
	MOVF	RESULTADO_HI,W
	BANK1
	MOVWF	A_HI_LPA
	BANK0
	
	BANK1
	MOVF	C_LO_LPA,W
	BANK0
	CALL	MULT_HIPOTENUSA
	
	MOVF	RESULTADO_LO,W
	BANK1
	ADDWF	A_LO_LPA,F
	BTFSC	STATUS,C
	INCF	A_HI_LPA,F
	BANK0
	MOVF	RESULTADO_HI,W
	BANK1
	ADDWF	A_HI_LPA
	BANK0
	MOVLW	A_LO_LPA
	GOTO	CALCULA_SQUARE_HIPOTENUSA
	
MULT_HIPOTENUSA
	
	MOVWF	MULTIPLICANDO_DIVISOR
 	MOVWF	MULTIPLICADOR_DIVIDENDO
	CLRF	MULTIPLICANDO_2
	GOTO	CHAMA_MULTIPLICACAO
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*    	                  CALCULA A VELOCIDADE EXTERNA   				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

IFSPEED_IGUAL

	CALL	LE_I2C_II
	XORWF	VELOCIDADE,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2

IFSPEED_MAIOR

	CALL	LE_I2C_II
	SUBWF	VELOCIDADE,W
	BTFSS	STATUS,C
	GOTO	SAI_DO_IF_II
	BTFSS	STATUS,Z
	GOTO	INC_PONTEIRO2
	GOTO	SAI_DO_IF_II	

IFSPEED_MENOR

	CALL	LE_I2C_II
	SUBWF	VELOCIDADE,W
	BTFSC	STATUS,C
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2

SPACE_DEFAULT

	CALL	LE_I2C_II
	MOVWF	ESPACO_VELOCIMETRO
	GOTO	INC_PONTEIRO2

DISP1_VELOCIDADE

	MOVLW	LINHA_SUP+4
	
DISP1_VELOCIDADE_A

	CALL	TEMPO_LCD3
	
	MOVF	VELOCIDADE,W
	MOVWF	LSB
	
	PAGE0
	CALL	BIN_TO_DEC
	PAGE1
	
	MOVF	CONVERSAO_2,W
	ADDLW	.48
	CALL	TEMPO_LCD4
	
	MOVF	CONVERSAO_1,W
	ADDLW	.48
	CALL	TEMPO_LCD4
	
	MOVF	CONVERSAO_0,W
	ADDLW	.48
	CALL	TEMPO_LCD4
	
	MOVLW	.32
	CALL	TEMPO_LCD4
	
	MOVLW	 .109
	CALL	TEMPO_LCD4
	
	MOVLW	.47
	CALL	TEMPO_LCD4
	
	MOVLW	.115
	CALL	TEMPO_LCD4

	GOTO	INC_PONTEIRO2
			
DISP2_VELOCIDADE
	
	MOVLW	LINHA_INF+4
	GOTO	DISP1_VELOCIDADE_A
	
CARREGA_AUX2
	
	MOVLW	.255
	MOVWF	AUX2
	RETURN
	
CALCULA_VELOCIDADE
ON_SPEED
	
	CLRF	TEMPO_VELOCIMETRO
	
	
	CALL	CARREGA_AUX2
	BTFSC	INPUT1				; SENSOR 1 ATIVO?
	GOTO	$-2				; NÃO, ENTÃO AGUARDA
	DECFSZ	AUX2,F
	GOTO	$-3
	
	BSF	MODO_SPEED			; SIM, PÕE EM MODO SPEED
	
	CALL	CARREGA_AUX2
	BTFSS	INPUT1				; SENSOR 1 NÃO ATIVO?
	GOTO	$-2				; NÃO, ENTÃO AGUARDA
	DECFSZ	AUX2,F
	GOTO	$-3
	
	CALL	CARREGA_AUX2
	BTFSC	INPUT2
	GOTO	$-2
	DECFSZ	AUX2,F
	GOTO	$-3
	
	CALL	CARREGA_AUX2
	BTFSS	INPUT2
	GOTO	$-2	
	DECFSZ	AUX2,F
	GOTO	$-3
	
	BCF	MODO_SPEED
	BCF	STATUS,C
	RRF	TEMPO_VELOCIMETRO,W
	MOVWF	MULTIPLICANDO_DIVISOR
	CLRF	MULTIPLICANDO_2
	MOVF	ESPACO_VELOCIMETRO,W
	MOVWF	MULTIPLICADOR_DIVIDENDO
	CALL	DIVIDE
	MOVF	RESULTADO_LO,W
	MOVWF	VELOCIDADE
	GOTO	INC_PONTEIRO2	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*    	                  ROTINA DE TESTE DE DATA   				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TESTA_DATE

	;BCF	INTCON,GIE
	
	CALL	LE_I2C_II
	XORWF	DIA,W
	BTFSS	STATUS,Z
	GOTO	SAI_DATE
	
	CALL	LE_I2C_II
	XORWF	MES,W
	BTFSS	STATUS,Z
	GOTO	SAI_DATE
	
	CALL	LE_I2C_II
	XORWF	ANO,W
	BTFSC	STATUS,Z
	GOTO	ACERTA_DATA_A
		
SAI_DATE
	
	;BSF	INTCON,GIE
	GOTO	SAI_DO_IF_II
		
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*    	                  ROTINAS DE ACERTO DE DATA E HORA				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

ACERTA_HORA

	;BCF	INTCON,GIE
	
	CALL	LE_I2C_II
	MOVWF	HORA
	
	CALL	LE_I2C_II
	MOVWF	MINUTO
	
	CALL	LE_I2C_II
	MOVWF	SEGUNDO
	
	GOTO	ACERTA_DATA_A
		
ACERTA_DATA
	
	;BCF	INTCON,GIE
	
	CALL	LE_I2C_II
	MOVWF	DIA
	
	CALL	LE_I2C_II
	MOVWF	MES
	
	CALL	LE_I2C_II
	MOVWF	ANO

ACERTA_DATA_A
	
	;BSF	INTCON,GIE
	GOTO	INC_PONTEIRO2

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*    	                ROTINAS DE ACESSO Á VARIÁVEL CARACTER				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TXDATA_CARACTER_ASCII

	BSF	F_DISPOUSERIAL
	GOTO	DISP_CAR

TXDATA_CARACTER_BINARY

	BSF	F_DISPOUSERIAL
	BSF	NUM_STRING
	GOTO	DISP_TXDATA_BIN
	
TXDATA_CARACTER_HEX
	
	BSF	F_DISPOUSERIAL
	BSF	NUM_STRING
	GOTO	DISP_TXDATA_HEX

DISP1_CARACTER_ASCII

	MOVLW	LINHA_SUP+7
	
DISP1_CAR
	
	CALL	TEMPO_LCD3

DISP_CAR
	
	CALL	TABELA_VAR
	MOVWF	FSR
	
	MOVF	INDF,W
	CALL	VERIFICA_ENVIO
	
	BCF	F_DISPOUSERIAL
	GOTO	INC_PONTEIRO2

DISP2_CARACTER_ASCII

	MOVLW	LINHA_INF+7
	GOTO	DISP1_CAR	


DISP1_CARACTER_BINARY

	BSF	NUM_STRING
	GOTO	DISP1_BINARY_VAR

DISP2_CARACTER_BINARY
	
	BSF	NUM_STRING
	GOTO	DISP2_BINARY_VAR
	

DISP1_CARACTER_HEX

	BSF	NUM_STRING
	GOTO	DISP1_HEX_VAR

DISP2_CARACTER_HEX
	
	BSF	NUM_STRING
	GOTO	DISP2_HEX_VAR


ATRIBUI_CARACTER_LPA

	CALL	TABELA_VAR
	MOVWF	FSR
	CALL	LE_I2C_II
	MOVWF	INDF
	GOTO	INC_PONTEIRO2

TESTE_CARACTER_LPA

	CALL	TABELA_VAR
	MOVWF	FSR
	CALL	LE_I2C_II
	XORWF	INDF,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*    	                ROTINAS CHAMADA DE ALTO-NÍVEL				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

CALL_LPA

	CALL	LE_I2C_II		;LÊ A PARTE BAIXA
	MOVWF	AUX2
	
	CALL	LE_I2C_II		; LÊ A A PARTE ALTA
	
	MOVF	ENDERECO_HI,W
	MOVWF	ENDERECO_HI_CALL

	MOVF	ENDERECO_LO,W
	MOVWF	ENDERECO_LO_CALL
	
	MOVF	AUX2,W
	MOVWF	ENDERECO_LO
	
	MOVF	BUFFER,W
	MOVWF	ENDERECO_HI
	
	CALL	INC_PONTEIRO2
	
LE_PROXIMO
	
	PAGE0
	CALL	I2C_READ
	PAGE1
	MOVLW	.200
	XORWF	BUFFER,W
	BTFSC	STATUS,Z
	GOTO	SAI_CALL
	PAGE0
	CALL	DECODIFICA_INSTRUCAO
	PAGE1
	GOTO	LE_PROXIMO
		
SAI_CALL
	
	MOVF	ENDERECO_HI_CALL,W
	MOVWF	ENDERECO_HI
	
	MOVF	ENDERECO_LO_CALL,W
	MOVWF	ENDERECO_LO
	
	GOTO	INC_PONTEIRO2
	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*    	                ROTINAS DE DELAY COM VARIÁVEL				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DELAY_MS_VARIAVEL

	CALL	TABELA_VAR
	MOVWF	FSR
	
	MOVF	INDF,W
	PAGE0
	GOTO	TRATA_DELAY_MS_A
	
DELAY_SEG_VARIAVEL

	CALL	TABELA_VAR
	MOVWF	FSR
	MOVF	INDF,W
	PAGE0
	GOTO	TRATA_DELAY_SEG_A	

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*   	   	                CALCULA FATORIAL				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
	
CALCULA_FATORIAL

	CALL	TABELA_VAR
	MOVWF	FSR
	
	CALL	LE_I2C_II	
	
	MOVLW	HIGH SALTO_FATORIAL
	MOVWF	PCLATH
	
	MOVF	BUFFER,W
	ADDLW	LOW  SALTO_FATORIAL
	BTFSC	STATUS,C
	INCF	PCLATH,F
	MOVWF	PCL
	
SALTO_FATORIAL

	GOTO	FAT_0
	GOTO	FAT_1
	GOTO	FAT_2
	GOTO	FAT_3
	GOTO	FAT_4
	GOTO	FAT_5
	GOTO	FAT_6
	GOTO	FAT_7
	
FAT_8

	MOVLW	LOW FATORIAL_8
	MOVWF	INDF
	
	INCF	FSR,F
	MOVLW	HIGH FATORIAL_8
	MOVWF	INDF
	GOTO	INC_PONTEIRO2
	
FAT_7

	MOVLW	LOW FATORIAL_7
	MOVWF	INDF
	
	INCF	FSR,F
	MOVLW	HIGH FATORIAL_7
	MOVWF	INDF
	GOTO	INC_PONTEIRO2
	
FAT_6

	MOVLW	LOW FATORIAL_6
	MOVWF	INDF
	
	INCF	FSR,F
	MOVLW	HIGH FATORIAL_6
	MOVWF	INDF
	GOTO	INC_PONTEIRO2
	
FAT_5

	MOVLW	LOW FATORIAL_5
	MOVWF	INDF
	
	GOTO	LIMPA_ALTO
	
FAT_4

	MOVLW	LOW FATORIAL_4
	MOVWF	INDF
	
	GOTO	LIMPA_ALTO
FAT_3

	MOVLW	LOW FATORIAL_3
	MOVWF	INDF
	
	GOTO	LIMPA_ALTO

FAT_2

	MOVLW	LOW FATORIAL_2
	MOVWF	INDF
	
	GOTO	LIMPA_ALTO
	
FAT_1
FAT_0

	MOVLW	LOW FATORIAL_0
	MOVWF	INDF

LIMPA_ALTO
	
	INCF	FSR,F
	CLRF	INDF
	GOTO	INC_PONTEIRO2
	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*   	   	                LEITURA DO RANDOM				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

LE_RANDOM

	CALL	TABELA_VAR
	MOVWF	FSR
	
	MOVF	RANDOM,W
	ADDWF	ENDERECO_LO,W
	
	MOVWF	INDF
	
	INCF	FSR,F
	CLRF	INDF
	
	GOTO	INC_PONTEIRO2
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*   	   	                TRATAMENTO DO WHILE NOT				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

WHILE_NOT_VARIAVEL

	CALL	TABELA_VAR
	MOVWF	FSR_VARIAVEL
	
CHECA_VAR_NOT
	
	MOVF	FSR_VARIAVEL,W
	MOVWF	FSR
	MOVF	INDF,W
	BTFSC	STATUS,Z
	GOTO	CHAMA_WHILE_NOT		
	
	INCF	FSR,F
	MOVF	INDF,W
	BTFSS	STATUS,Z
	GOTO	CHAMA_WHILE_NOT

FIM_WHILE

	PAGE0
	GOTO	SAI_DO_WHILE
	
CHAMA_WHILE_NOT

	PAGE0
	CALL	PROCESSA_WHILE
	PAGE1
	GOTO	CHECA_VAR_NOT
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*   	   	                TRATAMENTO DO WHILE				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

WHILE_VARIAVEL

	CALL	TABELA_VAR
	MOVWF	FSR_VARIAVEL
	
CHECA_VAR
	
	MOVF	FSR_VARIAVEL,W
	MOVWF	FSR
	MOVF	INDF,W
	BTFSS	STATUS,Z
	GOTO	CHAMA_WHILE
	
	INCF	FSR,F
	MOVF	INDF,W
	BTFSC	STATUS,Z
	GOTO	FIM_WHILE
	
CHAMA_WHILE

	PAGE0
	CALL	PROCESSA_WHILE
	PAGE1
	GOTO	CHECA_VAR

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*   	   	          TRATAMENTO DA ESTRUTURA SELECT CASE				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

SELECT_CASE
	
 	CALL	TABELA_VAR
	MOVWF	FSR
	
SELECT_CASE_A

	CALL	LE_I2C_II			; LÊ PRÓXIMO BYTE

SELECT_CASE_X

	MOVLW	.233				; 
	XORWF	BUFFER,W
	BTFSC	STATUS,Z			; É O CASE?
	GOTO	SELECT_CASE_B			; NÃO
	
	MOVLW	.231
	XORWF	BUFFER,W
	BTFSS	STATUS,Z
	GOTO	SELECT_CASE_W
	
	CALL	LE_I2C_II
	XORLW	.231
	BTFSC	STATUS,Z
	GOTO	EXECUTA_A
	
SELECT_CASE_W
	
	MOVLW	.232
	XORWF	BUFFER,W
	BTFSS	STATUS,Z
	GOTO	SELECT_CASE_A
	
	CALL	LE_I2C_II
	XORLW	.232
	BTFSS	STATUS,Z
	GOTO	SELECT_CASE_X
	GOTO	INC_PONTEIRO2
	
CAR_RXDATA_A

	BTFSS	DADO_RX
	GOTO	SELECT_CASE_C
		
CARACTER_OU_RXDATA
	
	CALL	LE_I2C_II
	;BCF	INTCON,GIE
	XORWF	INDF,W
	;BSF	INTCON,GIE
	BTFSS	STATUS,Z
	GOTO	SELECT_CASE_C
	BCF	DADO_RX		; LIMPA FLAG DE RECEPÇÃO SERIAL
	GOTO	EXECUTA_A

SELECT_CASE_B
	
	MOVLW	BUFFER_SERIAL
	XORWF	FSR,W
	BTFSC	STATUS,Z
	GOTO	CAR_RXDATA_A
	
	MOVLW	A_CARACTER_LPA
	SUBWF	FSR,W
	
	BTFSC	STATUS,C
	GOTO	CARACTER_OU_RXDATA
	
	CALL	CARREGA_VAR
	
	MOVF	AUX_MATEMATICA_LO,W
	XORWF	INDF,W
	BTFSS	STATUS,Z
	GOTO	SELECT_CASE_C
	
	INCF	FSR,F
	MOVF	AUX_MATEMATICA_HI,W
	XORWF	INDF,W
	BTFSC	STATUS,Z
	GOTO	$+3
	DECF	FSR,F
	GOTO	SELECT_CASE_C

EXECUTA_A

	CALL	INC_PONTEIRO2
			
EXECUTA_COMANDOS
	
	PAGE0
	CALL	I2C_READ
	PAGE1
	MOVLW	.234
	XORWF	BUFFER,W
	BTFSC	STATUS,Z
	GOTO	VERIFICA_PROXIMO_BREAK

EXECUTA_COMANDO_A

	PAGE0
	CALL	DECODIFICA_INSTRUCAO
	PAGE1	
	
	GOTO	EXECUTA_COMANDOS	

VERIFICA_PROXIMO_BREAK
	
	CALL	LE_I2C_II
	XORLW	.234
	BTFSC	STATUS,Z
	GOTO	PROCURA_END_SELECT
	
	DECF	ENDERECO_LO,F
	BTFSC	STATUS,Z
	DECF	ENDERECO_HI,F
	GOTO	EXECUTA_COMANDOS
	
PROCURA_END_SELECT

	CALL	LE_I2C_II
	MOVLW	.232
	XORWF	BUFFER,W
	BTFSS	STATUS,Z
	GOTO	PROCURA_END_SELECT
	
	CALL	LE_I2C_II
	XORLW	.232
	BTFSS	STATUS,Z
	GOTO	PROCURA_END_SELECT
	GOTO	INC_PONTEIRO2
				
SELECT_CASE_C

	CALL	LE_I2C_II
	XORLW	.234
	BTFSS	STATUS,Z
	GOTO	SELECT_CASE_D
	
	CALL	LE_I2C_II
	XORLW	.234
	BTFSC	STATUS,Z
	GOTO	SELECT_CASE_A
	
SELECT_CASE_D

	MOVLW	.232
	XORWF	BUFFER,W
	BTFSS	STATUS,Z
	GOTO	SELECT_CASE_C
	
	CALL	LE_I2C_II
	XORLW	.232
	BTFSS	STATUS,Z
	GOTO	SELECT_CASE_C
	GOTO	INC_PONTEIRO2
	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*   	   	     TRATAMENTO DO COMANDO REPEAT POR VARIÁVEL				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TRATA_REPEAT_VARIAVEL

	CALL	TABELA_VAR
	MOVWF	FSR
	MOVF	INDF,W
	MOVWF	VEZES_REPEAT_LO
	INCF	FSR,F
	MOVF	INDF,W
	MOVWF	VEZES_REPEAT_HI
	PAGE0
	GOTO	REPEAT_VAR

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*   	    TRANSMISSÃO DE DADOS EM DECIMAL, HEXADECIMAL, BINÁRIO E OCTAL				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TXDATA_VAR_DEC

	BSF	F_DISPOUSERIAL
	GOTO	DISP_TXDATA_DEC
	
TXDATA_VAR_HEX

	BSF	F_DISPOUSERIAL
	GOTO	DISP_TXDATA_HEX

TXDATA_VAR_BIN

	BSF	F_DISPOUSERIAL
	GOTO	DISP_TXDATA_BIN
	
TXDATA_VAR_OCT
	
	BSF	F_DISPOUSERIAL
	GOTO	DISP_TXDATA_OCT


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	    	    ROTINA PARA VERIFICAR SE A SAÍDA TEM O VALOR ESPECIFICADO				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

IF_OUT_VALOR

	;MOVF	REG_595,W
	;ANDLW	B'00111111'
	;MOVWF	AUX2
	
	CALL	LE_I2C_II
	XORWF	AUX2,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	    	    ROTINA PARA VERIFICAR SE A ENTRADA TEM O VALOR ESPECIFICADO				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

IF_IN_VALOR
	
	SWAPF	PORTB,W
	MOVWF	AUX2
	COMF	AUX2,W
	ANDLW	B'00001111'
	MOVWF	AUX2
	
	BTFSS	INPUT5
	BSF	AUX2,4
	
	BTFSS	INPUT6
	BSF	AUX2,5
	
	CALL	LE_I2C_II
	XORWF	AUX2,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2
			
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	       	      ROTINA PARA CALCULAR A RAIZ QUADRADA DE UM NÚMERO				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

CALCULA_SQUARE

	CALL	TABELA_VAR

CALCULA_SQUARE_HIPOTENUSA

	MOVWF	FSR
	
	MOVF	INDF,W
	MOVWF	AUX_MATEMATICA_LO
	
	INCF	FSR,F
	MOVF	INDF,W
	MOVWF	AUX_MATEMATICA_HI
	
	MOVF	AUX_MATEMATICA_LO,F
	BTFSS	STATUS,Z
	GOTO	CALCULA_SQUARE_A
	
	MOVF	AUX_MATEMATICA_HI,F
	BTFSS	STATUS,Z
	GOTO	CALCULA_SQUARE_A
	
	GOTO	INC_PONTEIRO2
	
CALCULA_SQUARE_A
	
	CLRF	AUX2
	
CALCULA_SQUARE_B

	INCF	AUX2,F
	MOVF	AUX2,W
	MOVWF	MULTIPLICANDO_DIVISOR
	MOVWF	MULTIPLICADOR_DIVIDENDO
	CLRF	MULTIPLICANDO_2
	CALL	CHAMA_MULTIPLICACAO
	
	MOVF	RESULTADO_HI,W
	SUBWF	AUX_MATEMATICA_HI,W
	BTFSC	STATUS,Z
	GOTO	$+.4
	BTFSC	STATUS,C
	GOTO	CALCULA_SQUARE_B
	GOTO	FIM_SQUARE
	
	MOVF	RESULTADO_LO,W
	SUBWF	AUX_MATEMATICA_LO,W
	BTFSC	STATUS,Z
	GOTO	FIM_SQUARE
	BTFSC	STATUS,C
	GOTO	CALCULA_SQUARE_B
	
FIM_SQUARE
	
	CLRF	INDF
	DECF	FSR,F
	MOVF	AUX2,W
	MOVWF	INDF
	GOTO	INC_PONTEIRO2	


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	       	      ROTINA PARA CALCULAR A PERCENTAGEM DE UM NÚMERO				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

CALCULA_PERCENTAGEM_MENOS
	
	BSF	PERCENTAGEM
	GOTO	CALCULA_PERCENT
	
CALCULA_PERCENTAGEM_MAIS
	
	BCF	PERCENTAGEM

CALCULA_PERCENT	
	
	CALL	TABELA_VAR
	MOVWF	FSR
	
	MOVF	INDF,W
	MOVWF	MULTIPLICADOR_DIVIDENDO
	
	INCF	FSR,F
	MOVF	INDF,W
	MOVWF	MULTIPLICANDO_2
	
	MOVLW	.100
	MOVWF	MULTIPLICANDO_DIVISOR
	
	CALL	DIVIDE
	
	MOVF	RESULTADO_LO,W
	MOVWF	MULTIPLICADOR_DIVIDENDO
	
	MOVF	RESULTADO_HI,W
	MOVWF	MULTIPLICANDO_2
	
	CALL	LE_I2C_II
	MOVWF	MULTIPLICANDO_DIVISOR
	
	CALL	CHAMA_MULTIPLICACAO
	
	BTFSC	PERCENTAGEM
	GOTO	PERCENTAGEM_MENOS
	
	DECF	FSR,F
	MOVF	RESULTADO_LO,W
	ADDWF	INDF,F
	INCF	FSR,F
	BTFSC	STATUS,C
	INCF	INDF,F
	
	MOVF	RESULTADO_HI,W
	ADDWF	INDF,F
	
	GOTO	INC_PONTEIRO2

PERCENTAGEM_MENOS
	
	DECF	FSR,F
	MOVF	RESULTADO_LO,W
	SUBWF	INDF,F
	INCF	FSR,F
	BTFSS	STATUS,C
	DECF	INDF,F
	
	MOVF	RESULTADO_HI,W
	SUBWF	INDF,F
	
	GOTO	INC_PONTEIRO2

	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	       	      ROTINA PARA APRESENTAR DADOS NO DISPLAY				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DISP1_OCT_VAR
	
	MOVLW	LINHA_SUP+5
	
DISP1_OCT_VAR_A

	CALL	TEMPO_LCD3	

DISP_TXDATA_OCT
		
	CALL	TABELA_VAR
	MOVWF	FSR
	
	INCF	FSR,F
	
	MOVLW	.48
	BTFSC	INDF,7
	MOVLW	.49
	CALL	VERIFICA_ENVIO
	
	MOVF	INDF,W
	MOVWF	AUX2
	
	RRF	AUX2,F
	RRF	AUX2,F
	RRF	AUX2,F
	RRF	AUX2,W
	CALL	TABELA_OCTAL
	CALL	VERIFICA_ENVIO
	
	RRF 	INDF,W
	CALL	TABELA_OCTAL
	CALL	VERIFICA_ENVIO
	
	CLRF	AUX2
	
	BTFSC	INDF,0
	BSF	AUX2,2
	
	DECF	FSR,F
	
	BTFSC	INDF,7
	BSF	AUX2,1
	
	BTFSC	INDF,6
	BSF	AUX2,0
	
	MOVF	AUX2,W
	CALL	TABELA_OCTAL
	CALL	VERIFICA_ENVIO
	
	MOVF	INDF,W
	MOVWF	AUX2
	
	RRF	AUX2,F
	RRF	AUX2,F
	RRF	AUX2,W
	CALL	TABELA_OCTAL
	CALL	VERIFICA_ENVIO
	
	MOVF	INDF,W
	CALL	TABELA_OCTAL
	CALL	VERIFICA_ENVIO
	
	BCF	F_DISPOUSERIAL
	GOTO	INC_PONTEIRO2
	
TABELA_OCTAL
	
	ANDLW	B'00000111'
	MOVWF	AUX2
	MOVLW	HIGH SALTO_OCTAL
	MOVWF	PCLATH
	
	MOVF	AUX2,W
	ADDLW	LOW  SALTO_OCTAL
	BTFSC	STATUS,C
	INCF	PCLATH,F
	MOVWF	PCL

SALTO_OCTAL	
	
	RETLW	.48		; RETORNA ASCII 0
	RETLW	.49		; RETORNA ASCII 1
	RETLW	.50		; RETORNA ASCII 2
	RETLW	.51		; RETORNA ASCII 3
	RETLW	.52		; RETORNA ASCII 4
	RETLW	.53		; RETORNA ASCII 5
	RETLW	.54		; RETORNA ASCII 6
	RETLW	.55		; RETORNA ASCII 7
		

DISP2_OCT_VAR

	MOVLW	LINHA_INF+5
	GOTO	DISP1_OCT_VAR_A



;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	       	      OPERAÇÕES LÓGICAS COM AS VARIÁVEIS LPA				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

XOR_VAR_LPA
	
	CALL	TABELA_VAR
	MOVWF	FSR
	
	CALL	CARREGA_VAR
	
	MOVF	AUX_MATEMATICA_LO,W
	XORWF	INDF,F
	
	INCF	FSR,F
	
	MOVF	AUX_MATEMATICA_HI,W
	XORWF	INDF,F
	
	GOTO	INC_PONTEIRO2

AND_VAR_LPA

	CALL	TABELA_VAR
	MOVWF	FSR
	
	CALL	CARREGA_VAR
	
	MOVF	AUX_MATEMATICA_LO,W
	ANDWF	INDF,F
	
	INCF	FSR,F
	
	MOVF	AUX_MATEMATICA_HI,W
	ANDWF	INDF,F
	
	GOTO	INC_PONTEIRO2

OR_VAR_LPA

	CALL	TABELA_VAR
	MOVWF	FSR
	
	CALL	CARREGA_VAR
	
	MOVF	AUX_MATEMATICA_LO,W
	IORWF	INDF,F
	
	INCF	FSR,F
	
	MOVF	AUX_MATEMATICA_HI,W
	IORWF	INDF,F
	
	GOTO	INC_PONTEIRO2

NOT_VAR_LPA

	CALL	TABELA_VAR
	MOVWF	FSR
	
	COMF	INDF,F
	INCF	FSR,F
	COMF	INDF,F	
	
	GOTO	INC_PONTEIRO2

SWAP_VAR_LPA
	
	CALL	TABELA_VAR
	MOVWF	FSR
	
	MOVF	INDF,W
	MOVWF	AUX2
	
	INCF	FSR,F
	MOVF	INDF,W
	DECF	FSR,F
	MOVWF	INDF
	INCF	FSR
	MOVF	AUX2,W
	MOVWF	INDF
	
	GOTO	INC_PONTEIRO2
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	       	   ROTINA QUE MOSTRA O CONTEÚDO DA VARIÁVEL EM HEXADECIMAL				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DISP1_HEX_VAR

	MOVLW	LINHA_SUP+6
	BTFSC	NUM_STRING
	MOVLW	LINHA_SUP+7
	
DISP1_HEX_VAR_A
	
	CALL	TEMPO_LCD3

DISP_TXDATA_HEX
	
	CALL	TABELA_VAR
	BTFSS	NUM_STRING
	ADDLW	.1
	MOVWF	FSR
	CALL	PREPARA_REG
	
	BTFSC	NUM_STRING
	GOTO	$+3
	DECF	FSR,F
	CALL	PREPARA_REG
	
	BCF	NUM_STRING
	BCF	F_DISPOUSERIAL
	GOTO	INC_PONTEIRO2
	
PREPARA_REG

	SWAPF	INDF,F
	MOVF	INDF,W
	CALL	PREPARA_HEX
	
	SWAPF	INDF,F
	MOVF	INDF,W
	
PREPARA_HEX	
	
	ANDLW	B'00001111'
	MOVWF	AUX2
	MOVLW	.9
	SUBWF	AUX2,W
	MOVLW	.48
	BTFSC	STATUS,Z
	GOTO	$+3
	BTFSC	STATUS,C
	MOVLW	.55
	ADDWF	AUX2,W
	GOTO	VERIFICA_ENVIO
	
DISP2_HEX_VAR
	
	MOVLW	LINHA_INF+6
	BTFSC	NUM_STRING
	MOVLW	LINHA_INF+7
	GOTO	DISP1_HEX_VAR_A


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	       	   ROTINA QUE MOSTRA O CONTEÚDO DA VARIÁVEL EM BINÁRIO				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DISP1_BINARY_VAR

	MOVLW	LINHA_SUP
	BTFSC	NUM_STRING
	MOVLW	LINHA_SUP+4
	
DISP1_BINARY_VAR_A
	
	CALL	TEMPO_LCD3

DISP_TXDATA_BIN
	
	CALL	TABELA_VAR
	MOVWF	FSR
	
	MOVF	INDF,W
	MOVWF	AUX_MATEMATICA_LO
		
	BTFSS	NUM_STRING
	INCF	FSR,F
	MOVF	INDF,W
	MOVWF	AUX_MATEMATICA_HI
	
	MOVLW	.16
	BTFSC	NUM_STRING
	MOVLW	.8
	MOVWF	AUX2
	
DISP1_BINARY_VAR_B
	
	
	BCF	STATUS,C
	RLF	AUX_MATEMATICA_LO,F
	RLF	AUX_MATEMATICA_HI,F

	MOVLW	.48
	BTFSC	STATUS,C
	MOVLW	.49
	
	CALL	VERIFICA_ENVIO
	
	DECFSZ	AUX2,F
	GOTO	DISP1_BINARY_VAR_B
	BCF	F_DISPOUSERIAL
	BCF	NUM_STRING
	GOTO	INC_PONTEIRO2
	
DISP2_BINARY_VAR
	
	MOVLW	LINHA_INF
	BTFSC	NUM_STRING
	MOVLW	LINHA_INF+4
	GOTO	DISP1_BINARY_VAR_A
	
ENVIA_SER

	PAGE0
	CALL	TXDATA_TO_PC
	PAGE1
	RETURN
	
VERIFICA_ENVIO_A
	
	ADDLW	.48
	
VERIFICA_ENVIO
	
	BTFSS	F_DISPOUSERIAL
	GOTO	TEMPO_LCD4
	BTFSC	F_DISPOUSERIAL
	GOTO	ENVIA_SER
	
	
			
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*	                        ROTINA DE DIVISÃO DE 16 BITS				*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

DIVIDE
	CLRF	RESULTADO_HI
	CLRF	RESULTADO_LO
	
	MOVF	MULTIPLICANDO_DIVISOR,F
	BTFSC	STATUS,Z
	RETURN
	
	MOVF	MULTIPLICADOR_DIVIDENDO,F
	BTFSS	STATUS,Z
	GOTO	DIVIDE_A
	
	MOVF	MULTIPLICANDO_2,F
	BTFSC	STATUS,Z
	RETURN
	
DIVIDE_A

	MOVF	MULTIPLICANDO_DIVISOR,W
	SUBWF	MULTIPLICADOR_DIVIDENDO,F
	BTFSS	STATUS,C
	GOTO	DIVIDE_B

DIVIDE_C

	INCF	RESULTADO_LO,F
	BTFSC	STATUS,Z
	INCF	RESULTADO_HI,F
	GOTO	DIVIDE_A

DIVIDE_B

	MOVF	MULTIPLICANDO_2,F
	BTFSC	STATUS,Z
	RETURN
	DECF	MULTIPLICANDO_2,F
	GOTO	DIVIDE_C

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			       	   TABELA DE ESCOLHA DE VARIÁVEL					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
		
TABELA_VAR
	
	MOVLW	HIGH  (TABELA_VAR_A)
	MOVWF	PCLATH
	
	CALL	LE_I2C_II
	;ANDLW	B'00001111'
	ADDLW	LOW   (TABELA_VAR_A)
	BTFSC	STATUS,C
	INCF	PCLATH,F
	MOVWF	PCL	
		
TABELA_VAR_A
	
	RETLW	A_LO_LPA
	RETLW	B_LO_LPA
	RETLW	C_LO_LPA
	RETLW	D_LO_LPA
	RETLW	E_LO_LPA
	RETLW	F_LO_LPA
	RETLW	G_LO_LPA
	RETLW	H_LO_LPA
	RETLW	A_CARACTER_LPA
	RETLW	B_CARACTER_LPA
	RETLW	C_CARACTER_LPA
	RETLW	D_CARACTER_LPA	
	RETLW	E_CARACTER_LPA	
	RETLW	F_CARACTER_LPA	
	RETLW	G_CARACTER_LPA	
	RETLW	H_CARACTER_LPA	
	RETLW	BUFFER_SERIAL
	RETLW	A_LO_CASA1_LPA
	RETLW	B_LO_CASA1_LPA
	RETLW	C_LO_CASA1_LPA
	RETLW	D_LO_CASA1_LPA
	RETLW	A_LO_CASA2_LPA		
	RETLW	B_LO_CASA2_LPA
	RETLW	C_LO_CASA2_LPA
	RETLW	D_LO_CASA2_LPA

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			       	   INICIALIZAÇÃO DA VARIÁVEL X					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

POTENCIA_X_CTE
	
	CALL	TABELA_VAR

	MOVWF	FSR
	CALL	LE_I2C_II
	MOVWF	AUX1
	;MOVF	X_LO_LPA,W
	MOVF	INDF,W
	MOVWF	AUX2
	MOVWF	MULTIPLICANDO_DIVISOR
 	MOVWF	MULTIPLICADOR_DIVIDENDO
	CLRF	MULTIPLICANDO_2
	CALL	CHAMA_MULTIPLICACAO
	
	MOVF	RESULTADO_LO,W
	MOVWF	INDF
	
	INCF	FSR,F
	MOVF	RESULTADO_HI,W
	MOVWF	INDF
	
	MOVLW	.2
	XORWF	AUX1,W
	BTFSC	STATUS,Z
	GOTO	INC_PONTEIRO2
	
	DECF	AUX1,F
	DECF	AUX1,F
	
POTENCIA_X_CTE_A

	MOVF	INDF,W
	MOVWF	MULTIPLICANDO_2
	DECF	FSR,F
	MOVF	INDF,W
	MOVWF	MULTIPLICADOR_DIVIDENDO
	MOVF	AUX2,W
	MOVWF	MULTIPLICANDO_DIVISOR
	CALL	CHAMA_MULTIPLICACAO

	MOVF	RESULTADO_LO,W
	MOVWF	INDF

	INCF	FSR,F
	MOVF	RESULTADO_HI,W
	MOVWF	INDF
	DECF	FSR,F
	
	DECFSZ	AUX1,F
	GOTO	POTENCIA_X_CTE_A
	GOTO	INC_PONTEIRO2
	
CHAMA_MULTIPLICACAO

	PAGE0
	CALL	MULTIPLY
	PAGE1
	RETURN

DIVIDE_X_CTE
	
	CALL	TABELA_VAR
	MOVWF	FSR
	
	CALL	LE_I2C_II
	MOVWF	MULTIPLICANDO_DIVISOR

	MOVF	INDF,W
	MOVWF	MULTIPLICADOR_DIVIDENDO
	
	INCF	FSR,F
	MOVF	INDF,W
	MOVWF	MULTIPLICANDO_2
	
	CALL	DIVIDE
	GOTO	MULTIPLY_X_CTE_A
	
MULTIPLY_X_CTE
	
	CALL	TABELA_VAR
	MOVWF	FSR
	
	CALL	LE_I2C_II
	MOVWF	MULTIPLICANDO_DIVISOR
	
	MOVF	INDF,W
	MOVWF	MULTIPLICADOR_DIVIDENDO
	
	INCF	FSR,F
	MOVF	INDF,W
	MOVWF	MULTIPLICANDO_2
	
	CALL	CHAMA_MULTIPLICACAO

MULTIPLY_X_CTE_A
	
	MOVF	RESULTADO_HI,W
	MOVWF	INDF
	
	DECF	FSR,F
	MOVF	RESULTADO_LO,W
	MOVWF	INDF
	
	GOTO	INC_PONTEIRO2	

SOMA_CONSTANTE_X
	
	CALL	TABELA_VAR
	MOVWF	FSR
	
	CALL	LE_I2C_II
	ADDWF	INDF,F
	INCF	FSR,F
	BTFSC	STATUS,C
	INCF	INDF,F
	CALL	LE_I2C_II
	ADDWF	INDF,F
	GOTO	INC_PONTEIRO2	
	

SUBTRAI_CONSTANTE_X
	
	CALL	TABELA_VAR
	MOVWF	FSR
	
	CALL	LE_I2C_II
	SUBWF	INDF,F
	INCF	FSR,F
	BTFSS	STATUS,C
	DECF	INDF,F
	CALL	LE_I2C_II
	SUBWF	INDF,F
	GOTO	INC_PONTEIRO2	
	
INICIALIZAR_X

	CALL	TABELA_VAR
	MOVWF	FSR
	
	CALL	CARREGA_VAR
	
	MOVF	AUX_MATEMATICA_LO,W
	MOVWF	INDF
	
	INCF	FSR,F
	MOVF	AUX_MATEMATICA_HI,W
	MOVWF	INDF
	
	GOTO	INC_PONTEIRO2
	

TESTA_MAIOR_X
	
	CALL	TABELA_VAR
	ADDLW	.1
	MOVWF	FSR
	
	CALL	CARREGA_VAR
	
	MOVF	AUX_MATEMATICA_HI,W
	SUBWF	INDF,W
	BTFSC	STATUS,Z
	GOTO	$+4
	BTFSS	STATUS,C
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2
	
	DECF	FSR,F	
	MOVF	AUX_MATEMATICA_LO,W
	SUBWF	INDF,W
	BTFSC	STATUS,Z
	GOTO	SAI_DO_IF_II
	BTFSC	STATUS,C
	GOTO	INC_PONTEIRO2	
	GOTO	SAI_DO_IF_II
		
TESTA_MENOR_X
	
	CALL	TABELA_VAR
	ADDLW	.1
	MOVWF	FSR
		
	CALL	CARREGA_VAR
	
	MOVF	AUX_MATEMATICA_HI,W
	SUBWF	INDF,W
	BTFSC	STATUS,Z
	GOTO	$+4
	BTFSC	STATUS,C
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2
	
	DECF	FSR,F	
	MOVF	AUX_MATEMATICA_LO,W
	SUBWF	INDF,W
	BTFSS	STATUS,C
	GOTO	INC_PONTEIRO2	
	GOTO	SAI_DO_IF_II
	
	
CARREGA_VAR
	
	CALL	LE_I2C_II
	MOVWF	AUX_MATEMATICA_HI
	CALL	LE_I2C_II
	MOVWF	AUX_MATEMATICA_LO
	RETURN
	
TESTA_IGUAL_X

	CALL	TABELA_VAR
	ADDLW	.1
	MOVWF	FSR
	
	CALL	CARREGA_VAR
	
	MOVF	AUX_MATEMATICA_HI,W
	XORWF	INDF,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF_II
	
	DECF	FSR,F
	MOVF	AUX_MATEMATICA_LO,W
	XORWF	INDF,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2	
	
DISP1_X_LPA

	MOVLW	LINHA_SUP+.5

DISP1_X_LPA_A
	
	CALL	TEMPO_LCD3

DISP_TXDATA_DEC
	
	CALL	TABELA_VAR
	MOVWF	FSR
	
	MOVF	INDF,W
	MOVWF	LSB
	
	INCF	FSR,F
	MOVF	INDF,W
	MOVWF	MSB
	
	BSF	MODO_VARIAVEL
	GOTO	MOSTRA_CONVERSAO_DISPLAY
	
DISP2_X_LPA

	MOVLW	LINHA_INF+.5
	GOTO	DISP1_X_LPA_A
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			       	   COMANDOS PARA CARRREGAR NOVA FREQUENCIA					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

LOAD_WAVE_GENERATOR
	
	CALL	LE_I2C_II
	BANK1
	MOVWF	PR2
	BANK0
	MOVLW	.127
	MOVWF	CCPR1L
	GOTO	INC_PONTEIRO2

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  COMANDOS DE OSCILAÇÃO DE DISPLAY					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

SET_OSC_DISPLAY

	BSF	OSC_DISPLAY
	GOTO	INC_PONTEIRO2
	
SET_NO_OSC_DISPLAY

	BCF	OSC_DISPLAY
	GOTO	INC_PONTEIRO2
			
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  COMANDOS DO CONTADOR DE PULSOS					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

IF_PULSECOUNTER_MAIOR
	
	CALL	LE_I2C_II
	SUBWF	COUNTER1_HI,W
	BTFSS	STATUS,C
	GOTO	SAI_DO_IF_II
	
	CALL	LE_I2C_II
	SUBWF	COUNTER1_LO,W
	BTFSS	STATUS,C
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2
	
IF_PULSECOUNTER_MENOR
	
	CALL	LE_I2C_II
	SUBWF	COUNTER1_HI,W
	BTFSC	STATUS,C
	GOTO	SAI_DO_IF_II
	
	CALL	LE_I2C_II
	SUBWF	COUNTER1_LO,W
	BTFSC	STATUS,C
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2

IF_PULSECOUNTER_IGUAL

	CALL	LE_I2C_II
	XORWF	COUNTER1_HI,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF_II
	CALL	LE_I2C_II
	XORWF	COUNTER1_LO,W
	BTFSS	STATUS,Z
	GOTO	SAI_DO_IF_II
	GOTO	INC_PONTEIRO2


BEGIN_PULSECOUNTER

	BSF	MODO_COUNTER
	BCF	INTCON,T0IF
	BSF	INTCON,T0IE
	GOTO	INC_PONTEIRO2

STOP_PULSECOUNTER

	BCF	MODO_COUNTER
	BCF	INTCON,T0IE
	GOTO	INC_PONTEIRO2

CLEAR_PULSECOUNTER
	
	CLRF	COUNTER1_HI
	CLRF	COUNTER1_LO
	GOTO	INC_PONTEIRO2
	
	
INPUT6_AS_PULSECOUNTER
	BCF	INTCON,T0IF
	BSF	INTCON,T0IE
	GOTO	INC_PONTEIRO2
		
DISP1_PULSECOUNTER
	
	MOVLW	LINHA_SUP+.5

DISP1_PULSECOUNTER_A
	
	CALL	TEMPO_LCD3

DISP1_PULSECOUNTER_B
	
	MOVF	COUNTER1_LO,W
	MOVWF	LSB
	MOVF	COUNTER1_HI,W
	MOVWF	MSB

MOSTRA_CONVERSAO_DISPLAY
	
	PAGE0
	CALL	BIN_TO_DEC
	PAGE1
	
	MOVF	CONVERSAO_4,W
	CALL	VERIFICA_ENVIO_A
			
	MOVF	CONVERSAO_3,W
	CALL	VERIFICA_ENVIO_A
	
	MOVF	CONVERSAO_2,W
	CALL	VERIFICA_ENVIO_A
	
	BTFSS	MODO_VARIAVEL
	GOTO	CON_DISP_A
	
	MOVLW	A_LO_CASA1_LPA
	SUBWF	FSR,W
	BTFSS	STATUS,C
	GOTO	CON_DISP_A
	
	MOVLW	A_LO_CASA2_LPA
	SUBWF	FSR,W
	BTFSC	STATUS,C
	GOTO	CON_DISP_A
	
	MOVLW	','
	CALL	TEMPO_LCD4
	BCF	MODO_VARIAVEL
	
CON_DISP_A
			
	MOVF	CONVERSAO_1,W
	CALL	VERIFICA_ENVIO_A
	
	BTFSS	MODO_VARIAVEL
	GOTO	CON_DISP_B
	
	MOVLW	A_LO_CASA2_LPA
	SUBWF	FSR,W
	BTFSS	STATUS,C
	GOTO	CON_DISP_B
		
	MOVLW	','
	CALL	TEMPO_LCD4
	BCF	MODO_VARIAVEL
	
CON_DISP_B
	
	MOVF	CONVERSAO_0,W
	CALL	VERIFICA_ENVIO_A
	
	BCF	F_DISPOUSERIAL
	GOTO	INC_PONTEIRO2
	
DISP2_PULSECOUNTER
	
	MOVLW	LINHA_INF+.5
	GOTO	DISP1_PULSECOUNTER_A


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		  LEITURA DE I2C II					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

LE_I2C_II
	
	PAGE0
	CALL	LE_I2C
	PAGE1
	RETURN
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		  INCREMENTO DE PONTEIRO DA PÁGINA 1					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

INC_PONTEIRO2
	
	PAGE0
	GOTO	INC_PONTEIRO

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		        SAI DO IF DA PÁGINA 1					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

SAI_DO_IF_II

	PAGE0
	GOTO	SAI_DO_IF
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		  CHAMA FUNÇÃO PARA MOSTRAR DADOS NO LCD					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

TEMPO_LCD

	PAGE0
	CALL	LCD_COMANDO_4
	CALL	DELAY_DISP			; CHAMA DELAY DE +/- 15ms
	PAGE1
	RETURN	

TEMPO_LCD2

	PAGE0
	CALL	LCD_COMANDO
	CALL	DELAY_DISP			; CHAMA DELAY DE +/- 15ms
	PAGE1
	RETURN	

TEMPO_LCD3
	
	PAGE0
	CALL	LCD_COMANDO
	PAGE1
	RETURN

TEMPO_LCD4_A
	
	ADDLW	.48
	
TEMPO_LCD4

	PAGE0
	CALL	ENVIA_DISP
	PAGE1
	RETURN

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		  LIMPA MEMÓRIA DE DADOS					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

LIMPA_DADOS

	MOVLW	0xA0
	MOVWF	FSR
	
	CLRF	INDF
	INCF	FSR,F
	MOVLW	0xEF+1
	XORWF	FSR,W
	BTFSS	STATUS,Z
	GOTO	$-5		
	RETURN
		
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		  CONFIGURAÇÕES INICIAIS					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

CONFIG_
	;BSF	SDA
	;BSF	SCL
	
;	CLRF	PORTA
;	CLRF	PORTB
	
	BANK1
	MOVLW	B'00110000'
	MOVWF	TRISA
	MOVLW	B'00000110'
	MOVWF	TRISB
	MOVLW	B'10111111'
	MOVWF	OPTION_REG
	;MOVLW	B'01000000'
	;MOVWF	INTCON
	MOVLW	B'00100001'
	MOVWF	PIE1
	MOVLW	.25
	MOVWF	SPBRG
	MOVLW	B'00100100'
	MOVWF	TXSTA
	CLRF	EEADR
	MOVLW	.249
	MOVWF	PR2
	BANK0
	
	;CLRF	REG_595
	;PAGE0
	;CALL	OUT_DADOS_B
	;PAGE1
	
	MOVLW	B'00000101'
	MOVWF	T2CON
	
	MOVLW	B'00001111'
	MOVWF	CCP1CON
	CLRF	CCPR1L
		
	MOVLW	B'10010000'
	MOVWF	RCSTA	
	
	BTFSC	STATUS,NOT_TO
	GOTO	$

	MOVLW	B'11000000'
	MOVWF	INTCON
	;BSF	INTCON,GIE
			
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  INICIA RAM							*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

INIC_RAM
	MOVLW	0x20
	MOVWF	FSR
	CLRF	INDF
	INCF	FSR,F
	MOVLW	0x80
	XORWF	FSR,W
	BTFSS	STATUS,Z
	GOTO	$-.5
	
	CALL	LIMPA_DADOS
	
	PAGE0
	CALL	OUT_DADOS_B			;CHAMA ROTINA PARA LIMPAR SHIFT-REGISTER
	PAGE1
	
	MOVLW	HIGH .3036
	MOVWF 	TMR1H
	MOVLW	LOW  .3036
	MOVWF	TMR1L
	MOVLW	B'00110001'
	MOVWF	T1CON
	MOVLW	.2
	MOVWF	VEZES_RTC
	MOVLW	.1
	MOVWF	DIA
	MOVWF	MES		
	
	;BANK1
	;MOVLW	.60
	;MOVWF	ALETAS
	;MOVWF	ALETAS_2
	;BANK0
	
	
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*		  		  INICIALIZAÇÃO DO DISPLAY					*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

INIC_DISPLAY
	
	PAGE0
	CALL	DELAY_DISP			; CHAMA DELAY DE +/- 15ms
	PAGE1

; ** ESTE BLOCO NÃO DEVE SER ALTERADO

	MOVLW	B'00000011'		
	CALL	TEMPO_LCD
	;CALL	LCD_COMANDO_4
	;CALL	DELAY_DISP			; CHAMA DELAY DE +/- 15ms

	MOVLW	B'00000011'		
	CALL	TEMPO_LCD
	;CALL	LCD_COMANDO_4
	;CALL	DELAY_DISP			; CHAMA DELAY DE +/- 15ms

; ** DEFINIÇÃO DO MODO DE OPERAÇÃO

;	MOVLW	B'00000011'			; 8 VIAS (D7..D0)
	MOVLW	B'00000010'			; 4 VIAS (D7..D4)
	CALL	TEMPO_LCD
	;CALL	LCD_COMANDO_4
	;CALL	DELAY_DISP			; CHAMA DELAY DE +/- 15ms

; ** ESCOLHA DO NÚMERO DE LINHAS DO DISPLAY

;	MOVLW	B'00100000'			; DISPLAY COM 1 LINHA E CARACTER DE 5X7 DOTS
	MOVLW	B'00101000'			; DISPLAY COM 2 LINHAS E CARACTER DE 5X7 DOTS		
	CALL	TEMPO_LCD2
	;PAGE0
	;CALL	LCD_COMANDO
	;CALL	DELAY_DISP			; CHAMA DELAY DE +/- 15ms
	;PAGE1

	MOVLW	B'00001100'			; LIGA DISPLAY SEM CURSOR
;	MOVLW	B'00001110'			; LIGA DISPLAY COM CURSOR
;	MOVLW	B'00001111'			; LIGA DISPLAY COM CURSOR PISCANDO
	CALL	TEMPO_LCD2
	;PAGE0
	;CALL	LCD_COMANDO
	;CALL	DELAY_DISP			; CHAMA DELAY DE +/- 15ms
	;PAGE1

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  MENSAGEM INICIAL						*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
 
MEN_INICIAL

	;MOVLW	B'00000101'				; CONFIGURAÇÃO DEFAULT
	;MOVWF	T2CON					; DO PWM
	
	;MOVLW	B'00001111'
	;MOVWF	CCP1CON
	;CLRF	CCPR1L
	
	MOVLW	LIMPA_DISPLAY				; LIMPA O DISPLAY
	;CALL	LCD_COMANDO
	;CALL	DELAY_DISP				; CHAMA DELAY DE +/- 15ms
	CALL	TEMPO_LCD2
	
	BSF	HI_LO	
	MOVLW	MENSAGEM_INTRO_HI
	PAGE0
	CALL	MOSTRA_MENSAGENS
	PAGE1
	
	BCF	HI_LO
	MOVLW	MENSAGEM_INTRO_LO
	PAGE0
	CALL	MOSTRA_MENSAGENS
	PAGE1
	
	MOVLW	.3
	PAGE0
	CALL	DELAY_SEG
	PAGE1

	MOVLW	.19
	MOVWF	BASE_VOLTAGE
	
	MOVLW	LIMPA_DISPLAY
	PAGE0
	CALL	LCD_COMANDO
	PAGE1
	
	BSF	TEM_PROG
	PAGE0
	CALL	I2C_READ
	CALL	INC_PONTEIRO
	PAGE1
	MOVLW	SOH
	XORWF	BUFFER,W
	BTFSC	STATUS,Z
	GOTO	LOOP	
	
	BSF	HI_LO
	MOVLW	MENSAGEM_WAIT_HI
	PAGE0
	CALL	MOSTRA_MENSAGENS
	PAGE1
	
	BCF	HI_LO
	MOVLW	MENSAGEM_WAIT_LO
	PAGE0
	CALL	MOSTRA_MENSAGENS
	PAGE1
	
	BCF	TEM_PROG	


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  ROTINA PRINCIPAL						*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

LOOP
		
	COMF	RANDOM,F
	
	BTFSS	RCSTA,OERR
	GOTO	LOOP_A
	BCF	RCSTA,CREN
	MOVF	RCREG,W
	MOVF	RCREG,W
	MOVF	RCREG,W
	BSF	RCSTA,CREN

LOOP_A
	
	
LOOP_B
	
	BTFSS	TEM_PROG
	GOTO	LOOP
	PAGE0
	CALL	I2C_READ
	CALL	DECODIFICA_INSTRUCAO
	;BTFSC	ERRO
	;CALL	TRATA_ERRO
	BTFSC	F_CONVER
	CALL	CONVERSAO_FREQUENCIA
	BTFSC	RESET
	GOTO	RESETA
	PAGE1
	GOTO	LOOP


;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  FIM DA PÁGINA 1						*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
	
	ORG 0x0FFF

;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*
;*			  		  FIM DO PROGRAMA						*
;*	*	*	*	*	*	*	*	*	*	*	*	*	*	*	*

	END
